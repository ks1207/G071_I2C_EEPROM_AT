
G071_I2C_EEPROM_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e54  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa4  08003fa4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fac  08003fac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08003fc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003fc0  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013220  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b9  00000000  00000000  00033297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00035950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5c  00000000  00000000  00036a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194f4  00000000  00000000  0003778c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c74  00000000  00000000  00050c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3174  00000000  00000000  000668f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dec  00000000  00000000  00109a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010d854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003ef8 	.word	0x08003ef8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003ef8 	.word	0x08003ef8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t addrEEP;
	char* dataEEP="Dobrý den";
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <main+0x70>)
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
	char dataEPP_R[EE_PAGE_LEN];
	uint8_t result_W;
	uint8_t result_R;
	uint8_t time1=0;
 8000636:	234b      	movs	r3, #75	; 0x4b
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fb5f 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f82f 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f95b 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 f90b 	bl	8000864 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800064e:	f000 f887 	bl	8000760 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000652:	f000 f8cb 	bl	80007ec <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <main+0x74>)
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fce7 	bl	800302c <HAL_TIM_Base_Start>
  //test_EEPROM();
  addrEEP=0x03;
 800065e:	2548      	movs	r5, #72	; 0x48
 8000660:	197b      	adds	r3, r7, r5
 8000662:	2203      	movs	r2, #3
 8000664:	801a      	strh	r2, [r3, #0]
  result_W=write_s_EEPROM(addrEEP, dataEEP);
 8000666:	2347      	movs	r3, #71	; 0x47
 8000668:	18fc      	adds	r4, r7, r3
 800066a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800066c:	197b      	adds	r3, r7, r5
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fab2 	bl	8000bdc <write_s_EEPROM>
 8000678:	0003      	movs	r3, r0
 800067a:	7023      	strb	r3, [r4, #0]
  //HAL_Delay(1000);
  addrEEP=0x03;
 800067c:	197b      	adds	r3, r7, r5
 800067e:	2203      	movs	r2, #3
 8000680:	801a      	strh	r2, [r3, #0]
  result_R=read_p_EEPROM(addrEEP, dataEPP_R);
 8000682:	2346      	movs	r3, #70	; 0x46
 8000684:	18fc      	adds	r4, r7, r3
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	197b      	adds	r3, r7, r5
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fadc 	bl	8000c4c <read_p_EEPROM>
 8000694:	0003      	movs	r3, r0
 8000696:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x6c>
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	08003f10 	.word	0x08003f10
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b093      	sub	sp, #76	; 0x4c
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	2410      	movs	r4, #16
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2338      	movs	r3, #56	; 0x38
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f003 fbf3 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ba:	003b      	movs	r3, r7
 80006bc:	0018      	movs	r0, r3
 80006be:	2310      	movs	r3, #16
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f003 fbec 	bl	8003ea0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fd8d 	bl	80021ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2202      	movs	r2, #2
 80006d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006e0:	0021      	movs	r1, r4
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2240      	movs	r2, #64	; 0x40
 80006ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2202      	movs	r2, #2
 80006f2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2202      	movs	r2, #2
 80006f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2208      	movs	r2, #8
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2280      	movs	r2, #128	; 0x80
 800070a:	0292      	lsls	r2, r2, #10
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0492      	lsls	r2, r2, #18
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0592      	lsls	r2, r2, #22
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	187b      	adds	r3, r7, r1
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fdaf 	bl	8002284 <HAL_RCC_OscConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800072a:	f000 f92d 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	003b      	movs	r3, r7
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	003b      	movs	r3, r7
 8000736:	2202      	movs	r2, #2
 8000738:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	003b      	movs	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000746:	003b      	movs	r3, r7
 8000748:	2102      	movs	r1, #2
 800074a:	0018      	movs	r0, r3
 800074c:	f002 f8b4 	bl	80028b8 <HAL_RCC_ClockConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000754:	f000 f918 	bl	8000988 <Error_Handler>
  }
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b013      	add	sp, #76	; 0x4c
 800075e:	bd90      	pop	{r4, r7, pc}

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_I2C1_Init+0x80>)
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <MX_I2C1_Init+0x84>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300B29;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_I2C1_Init+0x80>)
 800076c:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_I2C1_Init+0x88>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x80>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_I2C1_Init+0x80>)
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_I2C1_Init+0x80>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_I2C1_Init+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_I2C1_Init+0x80>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_I2C1_Init+0x80>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x80>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C1_Init+0x80>)
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fd81 	bl	80012a4 <HAL_I2C_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 f8ef 	bl	8000988 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_I2C1_Init+0x80>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fc66 	bl	8002080 <HAL_I2CEx_ConfigAnalogFilter>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f8e6 	bl	8000988 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_I2C1_Init+0x80>)
 80007be:	2100      	movs	r1, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fca9 	bl	8002118 <HAL_I2CEx_ConfigDigitalFilter>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f8dd 	bl	8000988 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	035b      	lsls	r3, r3, #13
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 fcec 	bl	80021b0 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000028 	.word	0x20000028
 80007e4:	40005400 	.word	0x40005400
 80007e8:	00300b29 	.word	0x00300b29

080007ec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	230c      	movs	r3, #12
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 fb50 	bl	8003ea0 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM7_Init+0x6c>)
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_TIM7_Init+0x70>)
 8000804:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_TIM7_Init+0x6c>)
 8000808:	22a9      	movs	r2, #169	; 0xa9
 800080a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_TIM7_Init+0x6c>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_TIM7_Init+0x6c>)
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_TIM7_Init+0x74>)
 8000816:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_TIM7_Init+0x6c>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_TIM7_Init+0x6c>)
 8000820:	0018      	movs	r0, r3
 8000822:	f002 fbab 	bl	8002f7c <HAL_TIM_Base_Init>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800082a:	f000 f8ad 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800083a:	1d3a      	adds	r2, r7, #4
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_TIM7_Init+0x6c>)
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f002 fcc7 	bl	80031d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800084a:	f000 f89d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	2000007c 	.word	0x2000007c
 800085c:	40001400 	.word	0x40001400
 8000860:	0000ffff 	.word	0x0000ffff

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800086a:	4a24      	ldr	r2, [pc, #144]	; (80008fc <MX_USART2_UART_Init+0x98>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	0252      	lsls	r2, r2, #9
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 fcfe 	bl	80032b0 <HAL_UART_Init>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008b8:	f000 f866 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008be:	2100      	movs	r1, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f003 fa0d 	bl	8003ce0 <HAL_UARTEx_SetTxFifoThreshold>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ca:	f000 f85d 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f003 fa44 	bl	8003d60 <HAL_UARTEx_SetRxFifoThreshold>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008dc:	f000 f854 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x94>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f003 f9c2 	bl	8003c6c <HAL_UARTEx_DisableFifoMode>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f84c 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	200000c8 	.word	0x200000c8
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	240c      	movs	r4, #12
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2314      	movs	r3, #20
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f003 fac5 	bl	8003ea0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_GPIO_Init+0x84>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_GPIO_Init+0x84>)
 800091c:	2104      	movs	r1, #4
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_GPIO_Init+0x84>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2204      	movs	r2, #4
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_GPIO_Init+0x84>)
 8000930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_GPIO_Init+0x84>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_GPIO_Init+0x84>)
 800093c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fc8a 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000954:	0021      	movs	r1, r4
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2220      	movs	r2, #32
 800095a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2201      	movs	r2, #1
 8000960:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2202      	movs	r2, #2
 800096c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800096e:	187a      	adds	r2, r7, r1
 8000970:	23a0      	movs	r3, #160	; 0xa0
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fb12 	bl	8000fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b009      	add	sp, #36	; 0x24
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	40021000 	.word	0x40021000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_MspInit+0x4c>)
 800099c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	641a      	str	r2, [r3, #64]	; 0x40
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	2201      	movs	r2, #1
 80009ac:	4013      	ands	r3, r2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_MspInit+0x4c>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	0549      	lsls	r1, r1, #21
 80009bc:	430a      	orrs	r2, r1
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	055b      	lsls	r3, r3, #21
 80009c8:	4013      	ands	r3, r2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009ce:	23c0      	movs	r3, #192	; 0xc0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fa1a 	bl	8000e0c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b097      	sub	sp, #92	; 0x5c
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	2344      	movs	r3, #68	; 0x44
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	0018      	movs	r0, r3
 80009f2:	2314      	movs	r3, #20
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f003 fa52 	bl	8003ea0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	2410      	movs	r4, #16
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	0018      	movs	r0, r3
 8000a02:	2334      	movs	r3, #52	; 0x34
 8000a04:	001a      	movs	r2, r3
 8000a06:	2100      	movs	r1, #0
 8000a08:	f003 fa4a 	bl	8003ea0 <memset>
  if(hi2c->Instance==I2C1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <HAL_I2C_MspInit+0xbc>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d13f      	bne.n	8000a96 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	2220      	movs	r2, #32
 8000a1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	0018      	movs	r0, r3
 8000a26:	f002 f8f1 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a2e:	f7ff ffab 	bl	8000988 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_I2C_MspInit+0xc0>)
 8000a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_I2C_MspInit+0xc0>)
 8000a38:	2101      	movs	r1, #1
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_I2C_MspInit+0xc0>)
 8000a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a42:	2201      	movs	r2, #1
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a4a:	2144      	movs	r1, #68	; 0x44
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	22c0      	movs	r2, #192	; 0xc0
 8000a50:	00d2      	lsls	r2, r2, #3
 8000a52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2212      	movs	r2, #18
 8000a58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2206      	movs	r2, #6
 8000a6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	187a      	adds	r2, r7, r1
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fa93 	bl	8000fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_I2C_MspInit+0xc0>)
 8000a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_I2C_MspInit+0xc0>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0389      	lsls	r1, r1, #14
 8000a84:	430a      	orrs	r2, r1
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_I2C_MspInit+0xc0>)
 8000a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	039b      	lsls	r3, r3, #14
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b017      	add	sp, #92	; 0x5c
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <HAL_TIM_Base_MspInit+0x34>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aca:	2220      	movs	r2, #32
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	40001400 	.word	0x40001400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b097      	sub	sp, #92	; 0x5c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2344      	movs	r3, #68	; 0x44
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f003 f9d2 	bl	8003ea0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afc:	2410      	movs	r4, #16
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	0018      	movs	r0, r3
 8000b02:	2334      	movs	r3, #52	; 0x34
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f003 f9ca 	bl	8003ea0 <memset>
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <HAL_UART_MspInit+0xb8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d13e      	bne.n	8000b94 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2202      	movs	r2, #2
 8000b1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	f002 f871 	bl	8002c0c <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b2e:	f7ff ff2b 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	0289      	lsls	r1, r1, #10
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	029b      	lsls	r3, r3, #10
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b66:	2144      	movs	r1, #68	; 0x44
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2202      	movs	r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2201      	movs	r2, #1
 8000b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2201      	movs	r2, #1
 8000b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	187a      	adds	r2, r7, r1
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fa06 	bl	8000fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b017      	add	sp, #92	; 0x5c
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f904 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <write_s_EEPROM>:
 * 		  				EEPROM page boundary override
 * @result		result code front I2C device
 * */

 uint8_t write_s_EEPROM(uint16_t addr, char* data)
 {
 8000bdc:	b5b0      	push	{r4, r5, r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	0002      	movs	r2, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	1dbb      	adds	r3, r7, #6
 8000be8:	801a      	strh	r2, [r3, #0]
	 uint8_t result;
	 result=HAL_I2C_IsDeviceReady(&EE_PORT, EE_I2C_ADDR, ETH_AVAIL_TRIALS, ETH_AVAIL_TIMEOUT);
 8000bea:	250f      	movs	r5, #15
 8000bec:	197c      	adds	r4, r7, r5
 8000bee:	23fa      	movs	r3, #250	; 0xfa
 8000bf0:	005a      	lsls	r2, r3, #1
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <write_s_EEPROM+0x6c>)
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	21a0      	movs	r1, #160	; 0xa0
 8000bf8:	f000 fe4c 	bl	8001894 <HAL_I2C_IsDeviceReady>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	7023      	strb	r3, [r4, #0]

	 if (result==HAL_OK)
 8000c00:	002c      	movs	r4, r5
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d116      	bne.n	8000c38 <write_s_EEPROM+0x5c>
	 {
		 result=HAL_I2C_Mem_Write(&EE_PORT, EE_I2C_ADDR, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, strlen(data)+1, I2C_COMM_TIMEOUT);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fa79 	bl	8000104 <strlen>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3301      	adds	r3, #1
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	193c      	adds	r4, r7, r4
 8000c1c:	1dba      	adds	r2, r7, #6
 8000c1e:	8812      	ldrh	r2, [r2, #0]
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <write_s_EEPROM+0x6c>)
 8000c22:	210a      	movs	r1, #10
 8000c24:	9102      	str	r1, [sp, #8]
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	21a0      	movs	r1, #160	; 0xa0
 8000c30:	f000 fbce 	bl	80013d0 <HAL_I2C_Mem_Write>
 8000c34:	0003      	movs	r3, r0
 8000c36:	7023      	strb	r3, [r4, #0]
	 }
	 return result;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 }
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bdb0      	pop	{r4, r5, r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000028 	.word	0x20000028

08000c4c <read_p_EEPROM>:
   * 					PLEASE NOTE: string size must be-> EEPAGE_LEN
   * @result			result code front I2C device
   *
   * *******************/
  uint8_t read_p_EEPROM(uint16_t addr, char* data)
  {
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	0002      	movs	r2, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	1dbb      	adds	r3, r7, #6
 8000c58:	801a      	strh	r2, [r3, #0]
 	 uint8_t result;
 	 result=HAL_I2C_IsDeviceReady(&EE_PORT, EE_I2C_ADDR, ETH_AVAIL_TRIALS, ETH_AVAIL_TIMEOUT);
 8000c5a:	250f      	movs	r5, #15
 8000c5c:	197c      	adds	r4, r7, r5
 8000c5e:	23fa      	movs	r3, #250	; 0xfa
 8000c60:	005a      	lsls	r2, r3, #1
 8000c62:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <read_p_EEPROM+0x5c>)
 8000c64:	2301      	movs	r3, #1
 8000c66:	21a0      	movs	r1, #160	; 0xa0
 8000c68:	f000 fe14 	bl	8001894 <HAL_I2C_IsDeviceReady>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	7023      	strb	r3, [r4, #0]

 	 if (result==HAL_OK)
 8000c70:	197b      	adds	r3, r7, r5
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10f      	bne.n	8000c98 <read_p_EEPROM+0x4c>
 	 {
 		result=HAL_I2C_Mem_Read(&EE_PORT, EE_I2C_ADDR, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, EE_PAGE_LEN, I2C_COMM_TIMEOUT);
 8000c78:	197c      	adds	r4, r7, r5
 8000c7a:	1dbb      	adds	r3, r7, #6
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <read_p_EEPROM+0x5c>)
 8000c80:	230a      	movs	r3, #10
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	21a0      	movs	r1, #160	; 0xa0
 8000c90:	f000 fccc 	bl	800162c <HAL_I2C_Mem_Read>
 8000c94:	0003      	movs	r3, r0
 8000c96:	7023      	strb	r3, [r4, #0]
 	 }
 	 return result;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
  }
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000028 	.word	0x20000028

08000cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f7ff ff8f 	bl	8000bd2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cda:	f003 f8e9 	bl	8003eb0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cde:	f7ff fca5 	bl	800062c <main>

08000ce2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf0:	08003fb4 	.word	0x08003fb4
  ldr r2, =_sbss
 8000cf4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf8:	20000160 	.word	0x20000160

08000cfc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_COMP_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x3c>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Init+0x3c>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0049      	lsls	r1, r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f810 	bl	8000d40 <HAL_InitTick>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e001      	b.n	8000d30 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe32 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	230f      	movs	r3, #15
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_InitTick+0x88>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d02b      	beq.n	8000db0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_InitTick+0x8c>)
 8000d5a:	681c      	ldr	r4, [r3, #0]
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_InitTick+0x88>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	0019      	movs	r1, r3
 8000d62:	23fa      	movs	r3, #250	; 0xfa
 8000d64:	0098      	lsls	r0, r3, #2
 8000d66:	f7ff f9d5 	bl	8000114 <__udivsi3>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f7ff f9d0 	bl	8000114 <__udivsi3>
 8000d74:	0003      	movs	r3, r0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f905 	bl	8000f86 <HAL_SYSTICK_Config>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d112      	bne.n	8000da6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80a      	bhi.n	8000d9c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f8e4 	bl	8000f5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_InitTick+0x90>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e00d      	b.n	8000db8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	e008      	b.n	8000db8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da6:	230f      	movs	r3, #15
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e003      	b.n	8000db8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	001a      	movs	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	18d2      	adds	r2, r2, r3
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	601a      	str	r2, [r3, #0]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	20000008 	.word	0x20000008
 8000df4:	2000015c 	.word	0x2000015c

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	2000015c 	.word	0x2000015c

08000e0c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40010000 	.word	0x40010000
 8000e34:	fffff9ff 	.word	0xfffff9ff

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e4c:	d828      	bhi.n	8000ea0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4e:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <__NVIC_SetPriority+0xd4>)
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	33c0      	adds	r3, #192	; 0xc0
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	589b      	ldr	r3, [r3, r2]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	; 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	481f      	ldr	r0, [pc, #124]	; (8000f0c <__NVIC_SetPriority+0xd4>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	430a      	orrs	r2, r1
 8000e98:	33c0      	adds	r3, #192	; 0xc0
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e9e:	e031      	b.n	8000f04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <__NVIC_SetPriority+0xd8>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	400b      	ands	r3, r1
 8000eac:	3b08      	subs	r3, #8
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	3306      	adds	r3, #6
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	18d3      	adds	r3, r2, r3
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1dfa      	adds	r2, r7, #7
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	0011      	movs	r1, r2
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	00d2      	lsls	r2, r2, #3
 8000ec6:	21ff      	movs	r1, #255	; 0xff
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	43d2      	mvns	r2, r2
 8000ece:	401a      	ands	r2, r3
 8000ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	019b      	lsls	r3, r3, #6
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	401a      	ands	r2, r3
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	4003      	ands	r3, r0
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <__NVIC_SetPriority+0xd8>)
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	001c      	movs	r4, r3
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	4023      	ands	r3, r4
 8000ef4:	3b08      	subs	r3, #8
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	3306      	adds	r3, #6
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	18c3      	adds	r3, r0, r3
 8000f00:	3304      	adds	r3, #4
 8000f02:	601a      	str	r2, [r3, #0]
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b003      	add	sp, #12
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	045b      	lsls	r3, r3, #17
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d301      	bcc.n	8000f2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e010      	b.n	8000f4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <SysTick_Config+0x44>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f34:	2301      	movs	r3, #1
 8000f36:	425b      	negs	r3, r3
 8000f38:	2103      	movs	r1, #3
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff ff7c 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x44>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x44>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	210f      	movs	r1, #15
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	1c02      	adds	r2, r0, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ffbf 	bl	8000f14 <SysTick_Config>
 8000f96:	0003      	movs	r3, r0
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fae:	e147      	b.n	8001240 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	000a      	movs	r2, r1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <HAL_GPIO_Init+0x28>
 8000fc6:	e138      	b.n	800123a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d005      	beq.n	8000fe0 <HAL_GPIO_Init+0x40>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d130      	bne.n	8001042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	409a      	lsls	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001016:	2201      	movs	r2, #1
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	2201      	movs	r2, #1
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2203      	movs	r2, #3
 8001048:	4013      	ands	r3, r2
 800104a:	2b03      	cmp	r3, #3
 800104c:	d017      	beq.n	800107e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2203      	movs	r2, #3
 8001084:	4013      	ands	r3, r2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d123      	bne.n	80010d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	58d3      	ldr	r3, [r2, r3]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2207      	movs	r2, #7
 800109c:	4013      	ands	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	43da      	mvns	r2, r3
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2107      	movs	r1, #7
 80010b6:	400b      	ands	r3, r1
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	08da      	lsrs	r2, r3, #3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3208      	adds	r2, #8
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	6939      	ldr	r1, [r7, #16]
 80010d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	401a      	ands	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	23c0      	movs	r3, #192	; 0xc0
 800110c:	029b      	lsls	r3, r3, #10
 800110e:	4013      	ands	r3, r2
 8001110:	d100      	bne.n	8001114 <HAL_GPIO_Init+0x174>
 8001112:	e092      	b.n	800123a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001114:	4a50      	ldr	r2, [pc, #320]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3318      	adds	r3, #24
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	589b      	ldr	r3, [r3, r2]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	2203      	movs	r2, #3
 8001126:	4013      	ands	r3, r2
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	220f      	movs	r2, #15
 800112c:	409a      	lsls	r2, r3
 800112e:	0013      	movs	r3, r2
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	23a0      	movs	r3, #160	; 0xa0
 800113c:	05db      	lsls	r3, r3, #23
 800113e:	429a      	cmp	r2, r3
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x1ca>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a45      	ldr	r2, [pc, #276]	; (800125c <HAL_GPIO_Init+0x2bc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x1c6>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a44      	ldr	r2, [pc, #272]	; (8001260 <HAL_GPIO_Init+0x2c0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x1c2>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a43      	ldr	r2, [pc, #268]	; (8001264 <HAL_GPIO_Init+0x2c4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x1be>
 800115a:	2303      	movs	r3, #3
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x1cc>
 800115e:	2305      	movs	r3, #5
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x1cc>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x1cc>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x1cc>
 800116a:	2300      	movs	r3, #0
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	2103      	movs	r1, #3
 8001170:	400a      	ands	r2, r1
 8001172:	00d2      	lsls	r2, r2, #3
 8001174:	4093      	lsls	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800117c:	4936      	ldr	r1, [pc, #216]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3318      	adds	r3, #24
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	035b      	lsls	r3, r3, #13
 80011a2:	4013      	ands	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	039b      	lsls	r3, r3, #14
 80011cc:	4013      	ands	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 80011e0:	2384      	movs	r3, #132	; 0x84
 80011e2:	58d3      	ldr	r3, [r2, r3]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001204:	4914      	ldr	r1, [pc, #80]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001206:	2284      	movs	r2, #132	; 0x84
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	58d3      	ldr	r3, [r2, r3]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	4013      	ands	r3, r2
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001232:	4909      	ldr	r1, [pc, #36]	; (8001258 <HAL_GPIO_Init+0x2b8>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	40da      	lsrs	r2, r3
 8001248:	1e13      	subs	r3, r2, #0
 800124a:	d000      	beq.n	800124e <HAL_GPIO_Init+0x2ae>
 800124c:	e6b0      	b.n	8000fb0 <HAL_GPIO_Init+0x10>
  }
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b006      	add	sp, #24
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021800 	.word	0x40021800
 800125c:	50000400 	.word	0x50000400
 8001260:	50000800 	.word	0x50000800
 8001264:	50000c00 	.word	0x50000c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	0008      	movs	r0, r1
 8001272:	0011      	movs	r1, r2
 8001274:	1cbb      	adds	r3, r7, #2
 8001276:	1c02      	adds	r2, r0, #0
 8001278:	801a      	strh	r2, [r3, #0]
 800127a:	1c7b      	adds	r3, r7, #1
 800127c:	1c0a      	adds	r2, r1, #0
 800127e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	1c7b      	adds	r3, r7, #1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001288:	1cbb      	adds	r3, r7, #2
 800128a:	881a      	ldrh	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001292:	1cbb      	adds	r3, r7, #2
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e082      	b.n	80013bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2241      	movs	r2, #65	; 0x41
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d107      	bne.n	80012d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	2100      	movs	r1, #0
 80012c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff fb89 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2241      	movs	r2, #65	; 0x41
 80012d6:	2124      	movs	r1, #36	; 0x24
 80012d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	438a      	bics	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4934      	ldr	r1, [pc, #208]	; (80013c4 <HAL_I2C_Init+0x120>)
 80012f4:	400a      	ands	r2, r1
 80012f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4931      	ldr	r1, [pc, #196]	; (80013c8 <HAL_I2C_Init+0x124>)
 8001304:	400a      	ands	r2, r1
 8001306:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	0209      	lsls	r1, r1, #8
 800131c:	430a      	orrs	r2, r1
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	e007      	b.n	8001332 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2184      	movs	r1, #132	; 0x84
 800132c:	0209      	lsls	r1, r1, #8
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d104      	bne.n	8001344 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	491f      	ldr	r1, [pc, #124]	; (80013cc <HAL_I2C_Init+0x128>)
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	491a      	ldr	r1, [pc, #104]	; (80013c8 <HAL_I2C_Init+0x124>)
 8001360:	400a      	ands	r2, r1
 8001362:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	431a      	orrs	r2, r3
 800136e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69d9      	ldr	r1, [r3, #28]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2241      	movs	r2, #65	; 0x41
 80013a8:	2120      	movs	r1, #32
 80013aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2242      	movs	r2, #66	; 0x42
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	f0ffffff 	.word	0xf0ffffff
 80013c8:	ffff7fff 	.word	0xffff7fff
 80013cc:	02008000 	.word	0x02008000

080013d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	000c      	movs	r4, r1
 80013da:	0010      	movs	r0, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	230a      	movs	r3, #10
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	1c22      	adds	r2, r4, #0
 80013e4:	801a      	strh	r2, [r3, #0]
 80013e6:	2308      	movs	r3, #8
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	1c02      	adds	r2, r0, #0
 80013ec:	801a      	strh	r2, [r3, #0]
 80013ee:	1dbb      	adds	r3, r7, #6
 80013f0:	1c0a      	adds	r2, r1, #0
 80013f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2241      	movs	r2, #65	; 0x41
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b20      	cmp	r3, #32
 80013fe:	d000      	beq.n	8001402 <HAL_I2C_Mem_Write+0x32>
 8001400:	e10c      	b.n	800161c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_I2C_Mem_Write+0x42>
 8001408:	232c      	movs	r3, #44	; 0x2c
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0ff      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_I2C_Mem_Write+0x5c>
 8001428:	2302      	movs	r3, #2
 800142a:	e0f8      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	2101      	movs	r1, #1
 8001432:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001434:	f7ff fce0 	bl	8000df8 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	0219      	lsls	r1, r3, #8
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2319      	movs	r3, #25
 8001448:	2201      	movs	r2, #1
 800144a:	f000 fc25 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0e3      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2241      	movs	r2, #65	; 0x41
 800145a:	2121      	movs	r1, #33	; 0x21
 800145c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2242      	movs	r2, #66	; 0x42
 8001462:	2140      	movs	r1, #64	; 0x40
 8001464:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	222c      	movs	r2, #44	; 0x2c
 8001476:	18ba      	adds	r2, r7, r2
 8001478:	8812      	ldrh	r2, [r2, #0]
 800147a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001482:	1dbb      	adds	r3, r7, #6
 8001484:	881c      	ldrh	r4, [r3, #0]
 8001486:	2308      	movs	r3, #8
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	881a      	ldrh	r2, [r3, #0]
 800148c:	230a      	movs	r3, #10
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	8819      	ldrh	r1, [r3, #0]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	0023      	movs	r3, r4
 800149e:	f000 fb13 	bl	8001ac8 <I2C_RequestMemoryWrite>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2240      	movs	r2, #64	; 0x40
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0b5      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2bff      	cmp	r3, #255	; 0xff
 80014ba:	d911      	bls.n	80014e0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	22ff      	movs	r2, #255	; 0xff
 80014c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	045c      	lsls	r4, r3, #17
 80014cc:	230a      	movs	r3, #10
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	8819      	ldrh	r1, [r3, #0]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	0023      	movs	r3, r4
 80014da:	f000 fd97 	bl	800200c <I2C_TransferConfig>
 80014de:	e012      	b.n	8001506 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	049c      	lsls	r4, r3, #18
 80014f4:	230a      	movs	r3, #10
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	8819      	ldrh	r1, [r3, #0]
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	2300      	movs	r3, #0
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	0023      	movs	r3, r4
 8001502:	f000 fd83 	bl	800200c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	0018      	movs	r0, r3
 800150e:	f000 fc02 	bl	8001d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e081      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001534:	b29b      	uxth	r3, r3
 8001536:	3b01      	subs	r3, #1
 8001538:	b29a      	uxth	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001542:	3b01      	subs	r3, #1
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154e:	b29b      	uxth	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d03a      	beq.n	80015ca <HAL_I2C_Mem_Write+0x1fa>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d136      	bne.n	80015ca <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800155c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	0013      	movs	r3, r2
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	f000 fb95 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 800156e:	1e03      	subs	r3, r0, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e053      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157a:	b29b      	uxth	r3, r3
 800157c:	2bff      	cmp	r3, #255	; 0xff
 800157e:	d911      	bls.n	80015a4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	22ff      	movs	r2, #255	; 0xff
 8001584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	b2da      	uxtb	r2, r3
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	045c      	lsls	r4, r3, #17
 8001590:	230a      	movs	r3, #10
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	8819      	ldrh	r1, [r3, #0]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	0023      	movs	r3, r4
 800159e:	f000 fd35 	bl	800200c <I2C_TransferConfig>
 80015a2:	e012      	b.n	80015ca <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	049c      	lsls	r4, r3, #18
 80015b8:	230a      	movs	r3, #10
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	8819      	ldrh	r1, [r3, #0]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	2300      	movs	r3, #0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	0023      	movs	r3, r4
 80015c6:	f000 fd21 	bl	800200c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d198      	bne.n	8001506 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 fbda 	bl	8001d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e01a      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2220      	movs	r2, #32
 80015ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	490b      	ldr	r1, [pc, #44]	; (8001628 <HAL_I2C_Mem_Write+0x258>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2241      	movs	r2, #65	; 0x41
 8001604:	2120      	movs	r1, #32
 8001606:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2242      	movs	r2, #66	; 0x42
 800160c:	2100      	movs	r1, #0
 800160e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2240      	movs	r2, #64	; 0x40
 8001614:	2100      	movs	r1, #0
 8001616:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	e000      	b.n	800161e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800161c:	2302      	movs	r3, #2
  }
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b007      	add	sp, #28
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	fe00e800 	.word	0xfe00e800

0800162c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	000c      	movs	r4, r1
 8001636:	0010      	movs	r0, r2
 8001638:	0019      	movs	r1, r3
 800163a:	230a      	movs	r3, #10
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	1c22      	adds	r2, r4, #0
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	2308      	movs	r3, #8
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	1c02      	adds	r2, r0, #0
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	1c0a      	adds	r2, r1, #0
 800164e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2241      	movs	r2, #65	; 0x41
 8001654:	5c9b      	ldrb	r3, [r3, r2]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b20      	cmp	r3, #32
 800165a:	d000      	beq.n	800165e <HAL_I2C_Mem_Read+0x32>
 800165c:	e110      	b.n	8001880 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_I2C_Mem_Read+0x42>
 8001664:	232c      	movs	r3, #44	; 0x2c
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e103      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2240      	movs	r2, #64	; 0x40
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_I2C_Mem_Read+0x5c>
 8001684:	2302      	movs	r3, #2
 8001686:	e0fc      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2240      	movs	r2, #64	; 0x40
 800168c:	2101      	movs	r1, #1
 800168e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001690:	f7ff fbb2 	bl	8000df8 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	0219      	lsls	r1, r3, #8
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2319      	movs	r3, #25
 80016a4:	2201      	movs	r2, #1
 80016a6:	f000 faf7 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0e7      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2241      	movs	r2, #65	; 0x41
 80016b6:	2122      	movs	r1, #34	; 0x22
 80016b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2242      	movs	r2, #66	; 0x42
 80016be:	2140      	movs	r1, #64	; 0x40
 80016c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	222c      	movs	r2, #44	; 0x2c
 80016d2:	18ba      	adds	r2, r7, r2
 80016d4:	8812      	ldrh	r2, [r2, #0]
 80016d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016de:	1dbb      	adds	r3, r7, #6
 80016e0:	881c      	ldrh	r4, [r3, #0]
 80016e2:	2308      	movs	r3, #8
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	881a      	ldrh	r2, [r3, #0]
 80016e8:	230a      	movs	r3, #10
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	8819      	ldrh	r1, [r3, #0]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	0023      	movs	r3, r4
 80016fa:	f000 fa49 	bl	8001b90 <I2C_RequestMemoryRead>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d005      	beq.n	800170e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	2100      	movs	r1, #0
 8001708:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e0b9      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	2bff      	cmp	r3, #255	; 0xff
 8001716:	d911      	bls.n	800173c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	22ff      	movs	r2, #255	; 0xff
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	b2da      	uxtb	r2, r3
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	045c      	lsls	r4, r3, #17
 8001728:	230a      	movs	r3, #10
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	8819      	ldrh	r1, [r3, #0]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	4b56      	ldr	r3, [pc, #344]	; (800188c <HAL_I2C_Mem_Read+0x260>)
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	0023      	movs	r3, r4
 8001736:	f000 fc69 	bl	800200c <I2C_TransferConfig>
 800173a:	e012      	b.n	8001762 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	b2da      	uxtb	r2, r3
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	049c      	lsls	r4, r3, #18
 8001750:	230a      	movs	r3, #10
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	8819      	ldrh	r1, [r3, #0]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	4b4c      	ldr	r3, [pc, #304]	; (800188c <HAL_I2C_Mem_Read+0x260>)
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	0023      	movs	r3, r4
 800175e:	f000 fc55 	bl	800200c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	0013      	movs	r3, r2
 800176c:	2200      	movs	r2, #0
 800176e:	2104      	movs	r1, #4
 8001770:	f000 fa92 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e082      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03a      	beq.n	800182e <HAL_I2C_Mem_Read+0x202>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d136      	bne.n	800182e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	0013      	movs	r3, r2
 80017ca:	2200      	movs	r2, #0
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	f000 fa63 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e053      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2bff      	cmp	r3, #255	; 0xff
 80017e2:	d911      	bls.n	8001808 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	045c      	lsls	r4, r3, #17
 80017f4:	230a      	movs	r3, #10
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	8819      	ldrh	r1, [r3, #0]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	2300      	movs	r3, #0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	0023      	movs	r3, r4
 8001802:	f000 fc03 	bl	800200c <I2C_TransferConfig>
 8001806:	e012      	b.n	800182e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	b2da      	uxtb	r2, r3
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	049c      	lsls	r4, r3, #18
 800181c:	230a      	movs	r3, #10
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	8819      	ldrh	r1, [r3, #0]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	0023      	movs	r3, r4
 800182a:	f000 fbef 	bl	800200c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d194      	bne.n	8001762 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 faa8 	bl	8001d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d001      	beq.n	800184c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e01a      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2220      	movs	r2, #32
 8001852:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	490c      	ldr	r1, [pc, #48]	; (8001890 <HAL_I2C_Mem_Read+0x264>)
 8001860:	400a      	ands	r2, r1
 8001862:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2241      	movs	r2, #65	; 0x41
 8001868:	2120      	movs	r1, #32
 800186a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2242      	movs	r2, #66	; 0x42
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	e000      	b.n	8001882 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001880:	2302      	movs	r3, #2
  }
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b007      	add	sp, #28
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	80002400 	.word	0x80002400
 8001890:	fe00e800 	.word	0xfe00e800

08001894 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af02      	add	r7, sp, #8
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	230a      	movs	r3, #10
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	1c0a      	adds	r2, r1, #0
 80018a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2241      	movs	r2, #65	; 0x41
 80018b0:	5c9b      	ldrb	r3, [r3, r2]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	d000      	beq.n	80018ba <HAL_I2C_IsDeviceReady+0x26>
 80018b8:	e0fe      	b.n	8001ab8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	401a      	ands	r2, r3
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d101      	bne.n	80018d2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e0f3      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2240      	movs	r2, #64	; 0x40
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_I2C_IsDeviceReady+0x4c>
 80018dc:	2302      	movs	r3, #2
 80018de:	e0ec      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2240      	movs	r2, #64	; 0x40
 80018e4:	2101      	movs	r1, #1
 80018e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2241      	movs	r2, #65	; 0x41
 80018ec:	2124      	movs	r1, #36	; 0x24
 80018ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_I2C_IsDeviceReady+0x7a>
 80018fe:	230a      	movs	r3, #10
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	059b      	lsls	r3, r3, #22
 8001906:	0d9b      	lsrs	r3, r3, #22
 8001908:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_I2C_IsDeviceReady+0x230>)
 800190a:	431a      	orrs	r2, r3
 800190c:	e007      	b.n	800191e <HAL_I2C_IsDeviceReady+0x8a>
 800190e:	230a      	movs	r3, #10
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	059b      	lsls	r3, r3, #22
 8001916:	0d9b      	lsrs	r3, r3, #22
 8001918:	22a0      	movs	r2, #160	; 0xa0
 800191a:	0192      	lsls	r2, r2, #6
 800191c:	431a      	orrs	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fa68 	bl	8000df8 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2220      	movs	r2, #32
 8001934:	4013      	ands	r3, r2
 8001936:	3b20      	subs	r3, #32
 8001938:	425a      	negs	r2, r3
 800193a:	4153      	adcs	r3, r2
 800193c:	b2da      	uxtb	r2, r3
 800193e:	231f      	movs	r3, #31
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2210      	movs	r2, #16
 800194c:	4013      	ands	r3, r2
 800194e:	3b10      	subs	r3, #16
 8001950:	425a      	negs	r2, r3
 8001952:	4153      	adcs	r3, r2
 8001954:	b2da      	uxtb	r2, r3
 8001956:	231e      	movs	r3, #30
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800195c:	e035      	b.n	80019ca <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	d01a      	beq.n	800199a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001964:	f7ff fa48 	bl	8000df8 <HAL_GetTick>
 8001968:	0002      	movs	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d302      	bcc.n	800197a <HAL_I2C_IsDeviceReady+0xe6>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2241      	movs	r2, #65	; 0x41
 800197e:	2120      	movs	r1, #32
 8001980:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	2220      	movs	r2, #32
 8001988:	431a      	orrs	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2240      	movs	r2, #64	; 0x40
 8001992:	2100      	movs	r1, #0
 8001994:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e08f      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2220      	movs	r2, #32
 80019a2:	4013      	ands	r3, r2
 80019a4:	3b20      	subs	r3, #32
 80019a6:	425a      	negs	r2, r3
 80019a8:	4153      	adcs	r3, r2
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	231f      	movs	r3, #31
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2210      	movs	r2, #16
 80019ba:	4013      	ands	r3, r2
 80019bc:	3b10      	subs	r3, #16
 80019be:	425a      	negs	r2, r3
 80019c0:	4153      	adcs	r3, r2
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	231e      	movs	r3, #30
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80019ca:	231f      	movs	r3, #31
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d104      	bne.n	80019de <HAL_I2C_IsDeviceReady+0x14a>
 80019d4:	231e      	movs	r3, #30
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0bf      	beq.n	800195e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2210      	movs	r2, #16
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d01a      	beq.n	8001a22 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	0013      	movs	r3, r2
 80019f6:	2200      	movs	r2, #0
 80019f8:	2120      	movs	r1, #32
 80019fa:	f000 f94d 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e059      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2241      	movs	r2, #65	; 0x41
 8001a12:	2120      	movs	r1, #32
 8001a14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2240      	movs	r2, #64	; 0x40
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e04b      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2120      	movs	r1, #32
 8001a30:	f000 f932 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e03e      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2210      	movs	r2, #16
 8001a42:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d119      	bne.n	8001a88 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	01c9      	lsls	r1, r1, #7
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	0013      	movs	r3, r2
 8001a70:	2200      	movs	r2, #0
 8001a72:	2120      	movs	r1, #32
 8001a74:	f000 f910 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e01c      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2220      	movs	r2, #32
 8001a86:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d900      	bls.n	8001a98 <HAL_I2C_IsDeviceReady+0x204>
 8001a96:	e72e      	b.n	80018f6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2241      	movs	r2, #65	; 0x41
 8001a9c:	2120      	movs	r1, #32
 8001a9e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
  }
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b008      	add	sp, #32
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	02002000 	.word	0x02002000

08001ac8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	000c      	movs	r4, r1
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	250a      	movs	r5, #10
 8001ad8:	197b      	adds	r3, r7, r5
 8001ada:	1c22      	adds	r2, r4, #0
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	2308      	movs	r3, #8
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	1c02      	adds	r2, r0, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
 8001ae6:	1dbb      	adds	r3, r7, #6
 8001ae8:	1c0a      	adds	r2, r1, #0
 8001aea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	045c      	lsls	r4, r3, #17
 8001af6:	197b      	adds	r3, r7, r5
 8001af8:	8819      	ldrh	r1, [r3, #0]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <I2C_RequestMemoryWrite+0xc4>)
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	0023      	movs	r3, r4
 8001b02:	f000 fa83 	bl	800200c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 f902 	bl	8001d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d001      	beq.n	8001b1a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e033      	b.n	8001b82 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b1a:	1dbb      	adds	r3, r7, #6
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b22:	2308      	movs	r3, #8
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b30:	e019      	b.n	8001b66 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b32:	2308      	movs	r3, #8
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	6a39      	ldr	r1, [r7, #32]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f8e3 	bl	8001d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d001      	beq.n	8001b58 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e014      	b.n	8001b82 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b58:	2308      	movs	r3, #8
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b66:	6a3a      	ldr	r2, [r7, #32]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	0013      	movs	r3, r2
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	f000 f890 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	80002000 	.word	0x80002000

08001b90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	000c      	movs	r4, r1
 8001b9a:	0010      	movs	r0, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	250a      	movs	r5, #10
 8001ba0:	197b      	adds	r3, r7, r5
 8001ba2:	1c22      	adds	r2, r4, #0
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	1c02      	adds	r2, r0, #0
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	1dbb      	adds	r3, r7, #6
 8001bb0:	1c0a      	adds	r2, r1, #0
 8001bb2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	197b      	adds	r3, r7, r5
 8001bbc:	8819      	ldrh	r1, [r3, #0]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <I2C_RequestMemoryRead+0xc0>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f000 fa21 	bl	800200c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bcc:	6a39      	ldr	r1, [r7, #32]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f000 f8a0 	bl	8001d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e033      	b.n	8001c46 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bde:	1dbb      	adds	r3, r7, #6
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001be6:	2308      	movs	r3, #8
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf4:	e019      	b.n	8001c2a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	6a39      	ldr	r1, [r7, #32]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f881 	bl	8001d16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d001      	beq.n	8001c1c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e014      	b.n	8001c46 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2a:	6a3a      	ldr	r2, [r7, #32]
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	0013      	movs	r3, r2
 8001c34:	2200      	movs	r2, #0
 8001c36:	2140      	movs	r1, #64	; 0x40
 8001c38:	f000 f82e 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001c3c:	1e03      	subs	r3, r0, #0
 8001c3e:	d001      	beq.n	8001c44 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	80002000 	.word	0x80002000

08001c54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d103      	bne.n	8001c72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d007      	beq.n	8001c90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	619a      	str	r2, [r3, #24]
  }
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca8:	e021      	b.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	d01e      	beq.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb0:	f7ff f8a2 	bl	8000df8 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d302      	bcc.n	8001cc6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d113      	bne.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	2220      	movs	r2, #32
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2241      	movs	r2, #65	; 0x41
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2242      	movs	r2, #66	; 0x42
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2240      	movs	r2, #64	; 0x40
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	425a      	negs	r2, r3
 8001cfe:	4153      	adcs	r3, r2
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	001a      	movs	r2, r3
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d0ce      	beq.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b004      	add	sp, #16
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d22:	e02b      	b.n	8001d7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f000 f86e 	bl	8001e0c <I2C_IsErrorOccurred>
 8001d30:	1e03      	subs	r3, r0, #0
 8001d32:	d001      	beq.n	8001d38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e029      	b.n	8001d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	d01e      	beq.n	8001d7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff f85b 	bl	8000df8 <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d113      	bne.n	8001d7c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	2220      	movs	r2, #32
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2241      	movs	r2, #65	; 0x41
 8001d64:	2120      	movs	r1, #32
 8001d66:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2242      	movs	r2, #66	; 0x42
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2240      	movs	r2, #64	; 0x40
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e007      	b.n	8001d8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d1cc      	bne.n	8001d24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b004      	add	sp, #16
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da0:	e028      	b.n	8001df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 f82f 	bl	8001e0c <I2C_IsErrorOccurred>
 8001dae:	1e03      	subs	r3, r0, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e026      	b.n	8001e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7ff f81f 	bl	8000df8 <HAL_GetTick>
 8001dba:	0002      	movs	r2, r0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d113      	bne.n	8001df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2241      	movs	r2, #65	; 0x41
 8001ddc:	2120      	movs	r1, #32
 8001dde:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2242      	movs	r2, #66	; 0x42
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2240      	movs	r2, #64	; 0x40
 8001dec:	2100      	movs	r1, #0
 8001dee:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e007      	b.n	8001e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d1cf      	bne.n	8001da2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b004      	add	sp, #16
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b08b      	sub	sp, #44	; 0x2c
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e18:	2327      	movs	r3, #39	; 0x27
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2210      	movs	r2, #16
 8001e34:	4013      	ands	r3, r2
 8001e36:	d100      	bne.n	8001e3a <I2C_IsErrorOccurred+0x2e>
 8001e38:	e082      	b.n	8001f40 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e42:	e060      	b.n	8001f06 <I2C_IsErrorOccurred+0xfa>
 8001e44:	2427      	movs	r4, #39	; 0x27
 8001e46:	193b      	adds	r3, r7, r4
 8001e48:	193a      	adds	r2, r7, r4
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3301      	adds	r3, #1
 8001e52:	d058      	beq.n	8001f06 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e54:	f7fe ffd0 	bl	8000df8 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d306      	bcc.n	8001e72 <I2C_IsErrorOccurred+0x66>
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	193a      	adds	r2, r7, r4
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d149      	bne.n	8001f06 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	01db      	lsls	r3, r3, #7
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e80:	2013      	movs	r0, #19
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	2142      	movs	r1, #66	; 0x42
 8001e88:	5c52      	ldrb	r2, [r2, r1]
 8001e8a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	401a      	ands	r2, r3
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d126      	bne.n	8001eee <I2C_IsErrorOccurred+0xe2>
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	01db      	lsls	r3, r3, #7
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d021      	beq.n	8001eee <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d01d      	beq.n	8001eee <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	01c9      	lsls	r1, r1, #7
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ec4:	f7fe ff98 	bl	8000df8 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ecc:	e00f      	b.n	8001eee <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ece:	f7fe ff93 	bl	8000df8 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b19      	cmp	r3, #25
 8001eda:	d908      	bls.n	8001eee <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ee4:	2327      	movs	r3, #39	; 0x27
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]

              break;
 8001eec:	e00b      	b.n	8001f06 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2127      	movs	r1, #39	; 0x27
 8001efa:	187a      	adds	r2, r7, r1
 8001efc:	1879      	adds	r1, r7, r1
 8001efe:	7809      	ldrb	r1, [r1, #0]
 8001f00:	7011      	strb	r1, [r2, #0]
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d1e3      	bne.n	8001ece <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d004      	beq.n	8001f1e <I2C_IsErrorOccurred+0x112>
 8001f14:	2327      	movs	r3, #39	; 0x27
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d092      	beq.n	8001e44 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f1e:	2327      	movs	r3, #39	; 0x27
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d103      	bne.n	8001f30 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	2204      	movs	r2, #4
 8001f34:	4313      	orrs	r3, r2
 8001f36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f38:	2327      	movs	r3, #39	; 0x27
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d00c      	beq.n	8001f6c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4313      	orrs	r3, r2
 8001f58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	0052      	lsls	r2, r2, #1
 8001f62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f64:	2327      	movs	r3, #39	; 0x27
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4013      	ands	r3, r2
 8001f74:	d00c      	beq.n	8001f90 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	00d2      	lsls	r2, r2, #3
 8001f86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f88:	2327      	movs	r3, #39	; 0x27
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00c      	beq.n	8001fb4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fac:	2327      	movs	r3, #39	; 0x27
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fb4:	2327      	movs	r3, #39	; 0x27
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01d      	beq.n	8001ffa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fe47 	bl	8001c54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	490d      	ldr	r1, [pc, #52]	; (8002008 <I2C_IsErrorOccurred+0x1fc>)
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2241      	movs	r2, #65	; 0x41
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2242      	movs	r2, #66	; 0x42
 8001fee:	2100      	movs	r1, #0
 8001ff0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001ffa:	2327      	movs	r3, #39	; 0x27
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	781b      	ldrb	r3, [r3, #0]
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b00b      	add	sp, #44	; 0x2c
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	fe00e800 	.word	0xfe00e800

0800200c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	0008      	movs	r0, r1
 8002016:	0011      	movs	r1, r2
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	240a      	movs	r4, #10
 800201c:	193b      	adds	r3, r7, r4
 800201e:	1c02      	adds	r2, r0, #0
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	2009      	movs	r0, #9
 8002024:	183b      	adds	r3, r7, r0
 8002026:	1c0a      	adds	r2, r1, #0
 8002028:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800202a:	193b      	adds	r3, r7, r4
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	059b      	lsls	r3, r3, #22
 8002030:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002032:	183b      	adds	r3, r7, r0
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0419      	lsls	r1, r3, #16
 8002038:	23ff      	movs	r3, #255	; 0xff
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800203e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	4313      	orrs	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002056:	0d51      	lsrs	r1, r2, #21
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	00d2      	lsls	r2, r2, #3
 800205c:	400a      	ands	r2, r1
 800205e:	4907      	ldr	r1, [pc, #28]	; (800207c <I2C_TransferConfig+0x70>)
 8002060:	430a      	orrs	r2, r1
 8002062:	43d2      	mvns	r2, r2
 8002064:	401a      	ands	r2, r3
 8002066:	0011      	movs	r1, r2
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b007      	add	sp, #28
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	03ff63ff 	.word	0x03ff63ff

08002080 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2241      	movs	r2, #65	; 0x41
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	d138      	bne.n	8002108 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2240      	movs	r2, #64	; 0x40
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e032      	b.n	800210a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2240      	movs	r2, #64	; 0x40
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2241      	movs	r2, #65	; 0x41
 80020b0:	2124      	movs	r1, #36	; 0x24
 80020b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2101      	movs	r1, #1
 80020c0:	438a      	bics	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4911      	ldr	r1, [pc, #68]	; (8002114 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2241      	movs	r2, #65	; 0x41
 80020f8:	2120      	movs	r1, #32
 80020fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	2100      	movs	r1, #0
 8002102:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
  }
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	ffffefff 	.word	0xffffefff

08002118 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2241      	movs	r2, #65	; 0x41
 8002126:	5c9b      	ldrb	r3, [r3, r2]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b20      	cmp	r3, #32
 800212c:	d139      	bne.n	80021a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	5c9b      	ldrb	r3, [r3, r2]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002138:	2302      	movs	r3, #2
 800213a:	e033      	b.n	80021a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	2101      	movs	r1, #1
 8002142:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2241      	movs	r2, #65	; 0x41
 8002148:	2124      	movs	r1, #36	; 0x24
 800214a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2101      	movs	r1, #1
 8002158:	438a      	bics	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2241      	movs	r2, #65	; 0x41
 8002192:	2120      	movs	r1, #32
 8002194:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2240      	movs	r2, #64	; 0x40
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021a2:	2302      	movs	r3, #2
  }
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	fffff0ff 	.word	0xfffff0ff

080021b0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80021ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80021be:	2101      	movs	r1, #1
 80021c0:	430a      	orrs	r2, r1
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b004      	add	sp, #16
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000

080021ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d11f      	bne.n	8002250 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	0013      	movs	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	189b      	adds	r3, r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4912      	ldr	r1, [pc, #72]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800221e:	0018      	movs	r0, r3
 8002220:	f7fd ff78 	bl	8000114 <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	3301      	adds	r3, #1
 8002228:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800222a:	e008      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e001      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e009      	b.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	401a      	ands	r2, r3
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	429a      	cmp	r2, r3
 800224e:	d0ed      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	40007000 	.word	0x40007000
 8002260:	fffff9ff 	.word	0xfffff9ff
 8002264:	20000000 	.word	0x20000000
 8002268:	000f4240 	.word	0x000f4240

0800226c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	23e0      	movs	r3, #224	; 0xe0
 8002276:	01db      	lsls	r3, r3, #7
 8002278:	4013      	ands	r3, r2
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e2fe      	b.n	8002894 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x1e>
 80022a0:	e07c      	b.n	800239c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a2:	4bc3      	ldr	r3, [pc, #780]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2238      	movs	r2, #56	; 0x38
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ac:	4bc0      	ldr	r3, [pc, #768]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2203      	movs	r2, #3
 80022b2:	4013      	ands	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b10      	cmp	r3, #16
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3e>
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	4bb9      	ldr	r3, [pc, #740]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4013      	ands	r3, r2
 80022d2:	d062      	beq.n	800239a <HAL_RCC_OscConfig+0x116>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d15e      	bne.n	800239a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e2d9      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x78>
 80022ec:	4bb0      	ldr	r3, [pc, #704]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4baf      	ldr	r3, [pc, #700]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	0249      	lsls	r1, r1, #9
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e020      	b.n	800233e <HAL_RCC_OscConfig+0xba>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	02db      	lsls	r3, r3, #11
 8002304:	429a      	cmp	r2, r3
 8002306:	d10e      	bne.n	8002326 <HAL_RCC_OscConfig+0xa2>
 8002308:	4ba9      	ldr	r3, [pc, #676]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4ba8      	ldr	r3, [pc, #672]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	02c9      	lsls	r1, r1, #11
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	4ba6      	ldr	r3, [pc, #664]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4ba5      	ldr	r3, [pc, #660]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0249      	lsls	r1, r1, #9
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e00b      	b.n	800233e <HAL_RCC_OscConfig+0xba>
 8002326:	4ba2      	ldr	r3, [pc, #648]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4ba1      	ldr	r3, [pc, #644]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800232c:	49a1      	ldr	r1, [pc, #644]	; (80025b4 <HAL_RCC_OscConfig+0x330>)
 800232e:	400a      	ands	r2, r1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	4b9f      	ldr	r3, [pc, #636]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b9e      	ldr	r3, [pc, #632]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002338:	499f      	ldr	r1, [pc, #636]	; (80025b8 <HAL_RCC_OscConfig+0x334>)
 800233a:	400a      	ands	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d014      	beq.n	8002370 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fd57 	bl	8000df8 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fd52 	bl	8000df8 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e298      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	4b93      	ldr	r3, [pc, #588]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	4013      	ands	r3, r2
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xcc>
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fd42 	bl	8000df8 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237a:	f7fe fd3d 	bl	8000df8 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e283      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238c:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	4013      	ands	r3, r2
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0xf6>
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4013      	ands	r3, r2
 80023a4:	d100      	bne.n	80023a8 <HAL_RCC_OscConfig+0x124>
 80023a6:	e099      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a8:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2238      	movs	r2, #56	; 0x38
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b2:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2203      	movs	r2, #3
 80023b8:	4013      	ands	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d102      	bne.n	80023c8 <HAL_RCC_OscConfig+0x144>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d002      	beq.n	80023ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d135      	bne.n	800243a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ce:	4b78      	ldr	r3, [pc, #480]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x162>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e256      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a74      	ldr	r2, [pc, #464]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	021a      	lsls	r2, r3, #8
 80023f6:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d112      	bne.n	8002428 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002402:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x33c>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002416:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0adb      	lsrs	r3, r3, #11
 800241c:	2207      	movs	r2, #7
 800241e:	4013      	ands	r3, r2
 8002420:	4a68      	ldr	r2, [pc, #416]	; (80025c4 <HAL_RCC_OscConfig+0x340>)
 8002422:	40da      	lsrs	r2, r3
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x344>)
 8002426:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x348>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0018      	movs	r0, r3
 800242e:	f7fe fc87 	bl	8000d40 <HAL_InitTick>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d051      	beq.n	80024da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e22c      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d030      	beq.n	80024a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5e      	ldr	r2, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x33c>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800245c:	2180      	movs	r1, #128	; 0x80
 800245e:	0049      	lsls	r1, r1, #1
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fcc8 	bl	8000df8 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe fcc3 	bl	8000df8 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e209      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4013      	ands	r3, r2
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <HAL_RCC_OscConfig+0x338>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	021a      	lsls	r2, r3, #8
 800249c:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e01b      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024aa:	4949      	ldr	r1, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0x34c>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fca2 	bl	8000df8 <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fc9d 	bl	8000df8 <HAL_GetTick>
 80024be:	0002      	movs	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1e3      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	4b38      	ldr	r3, [pc, #224]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4013      	ands	r3, r2
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x236>
 80024d8:	e000      	b.n	80024dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2208      	movs	r2, #8
 80024e2:	4013      	ands	r3, r2
 80024e4:	d047      	beq.n	8002576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024e6:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2238      	movs	r2, #56	; 0x38
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b18      	cmp	r3, #24
 80024f0:	d10a      	bne.n	8002508 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d03c      	beq.n	8002576 <HAL_RCC_OscConfig+0x2f2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d138      	bne.n	8002576 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e1c5      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d019      	beq.n	8002544 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fc6c 	bl	8000df8 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fc67 	bl	8000df8 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1ad      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800253a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253c:	2202      	movs	r2, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d0f1      	beq.n	8002526 <HAL_RCC_OscConfig+0x2a2>
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800254a:	2101      	movs	r1, #1
 800254c:	438a      	bics	r2, r1
 800254e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fc52 	bl	8000df8 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255a:	f7fe fc4d 	bl	8000df8 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e193      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d1f1      	bne.n	800255a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2204      	movs	r2, #4
 800257c:	4013      	ands	r3, r2
 800257e:	d100      	bne.n	8002582 <HAL_RCC_OscConfig+0x2fe>
 8002580:	e0c6      	b.n	8002710 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002582:	231f      	movs	r3, #31
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2238      	movs	r2, #56	; 0x38
 8002590:	4013      	ands	r3, r2
 8002592:	2b20      	cmp	r3, #32
 8002594:	d11e      	bne.n	80025d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0x32c>)
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	2202      	movs	r2, #2
 800259c:	4013      	ands	r3, r2
 800259e:	d100      	bne.n	80025a2 <HAL_RCC_OscConfig+0x31e>
 80025a0:	e0b6      	b.n	8002710 <HAL_RCC_OscConfig+0x48c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d000      	beq.n	80025ac <HAL_RCC_OscConfig+0x328>
 80025aa:	e0b1      	b.n	8002710 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e171      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	fffeffff 	.word	0xfffeffff
 80025b8:	fffbffff 	.word	0xfffbffff
 80025bc:	ffff80ff 	.word	0xffff80ff
 80025c0:	ffffc7ff 	.word	0xffffc7ff
 80025c4:	00f42400 	.word	0x00f42400
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004
 80025d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025d4:	4bb1      	ldr	r3, [pc, #708]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	055b      	lsls	r3, r3, #21
 80025dc:	4013      	ands	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_OscConfig+0x360>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x362>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4bac      	ldr	r3, [pc, #688]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ee:	4bab      	ldr	r3, [pc, #684]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0549      	lsls	r1, r1, #21
 80025f4:	430a      	orrs	r2, r1
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025f8:	4ba8      	ldr	r3, [pc, #672]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80025fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	055b      	lsls	r3, r3, #21
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002606:	231f      	movs	r3, #31
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260e:	4ba4      	ldr	r3, [pc, #656]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4013      	ands	r3, r2
 8002618:	d11a      	bne.n	8002650 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261a:	4ba1      	ldr	r3, [pc, #644]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4ba0      	ldr	r3, [pc, #640]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	0049      	lsls	r1, r1, #1
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002628:	f7fe fbe6 	bl	8000df8 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fbe1 	bl	8000df8 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e127      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	4b96      	ldr	r3, [pc, #600]	; (80028a0 <HAL_RCC_OscConfig+0x61c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4013      	ands	r3, r2
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x3e2>
 8002658:	4b90      	ldr	r3, [pc, #576]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800265a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800265c:	4b8f      	ldr	r3, [pc, #572]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c
 8002664:	e01c      	b.n	80026a0 <HAL_RCC_OscConfig+0x41c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x404>
 800266e:	4b8b      	ldr	r3, [pc, #556]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002672:	4b8a      	ldr	r3, [pc, #552]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002674:	2104      	movs	r1, #4
 8002676:	430a      	orrs	r2, r1
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800267c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800267e:	4b87      	ldr	r3, [pc, #540]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002680:	2101      	movs	r1, #1
 8002682:	430a      	orrs	r2, r1
 8002684:	65da      	str	r2, [r3, #92]	; 0x5c
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0x41c>
 8002688:	4b84      	ldr	r3, [pc, #528]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800268a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800268c:	4b83      	ldr	r3, [pc, #524]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800268e:	2101      	movs	r1, #1
 8002690:	438a      	bics	r2, r1
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c
 8002694:	4b81      	ldr	r3, [pc, #516]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002698:	4b80      	ldr	r3, [pc, #512]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800269a:	2104      	movs	r1, #4
 800269c:	438a      	bics	r2, r1
 800269e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d014      	beq.n	80026d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fba6 	bl	8000df8 <HAL_GetTick>
 80026ac:	0003      	movs	r3, r0
 80026ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b0:	e009      	b.n	80026c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fba1 	bl	8000df8 <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	4a79      	ldr	r2, [pc, #484]	; (80028a4 <HAL_RCC_OscConfig+0x620>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e0e6      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	4b75      	ldr	r3, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	2202      	movs	r2, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x42e>
 80026d0:	e013      	b.n	80026fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fb91 	bl	8000df8 <HAL_GetTick>
 80026d6:	0003      	movs	r3, r0
 80026d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026da:	e009      	b.n	80026f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fb8c 	bl	8000df8 <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	4a6f      	ldr	r2, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x620>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0d1      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2202      	movs	r2, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026fa:	231f      	movs	r3, #31
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002708:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800270a:	4967      	ldr	r1, [pc, #412]	; (80028a8 <HAL_RCC_OscConfig+0x624>)
 800270c:	400a      	ands	r2, r1
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x496>
 8002718:	e0bb      	b.n	8002892 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	2b10      	cmp	r3, #16
 8002724:	d100      	bne.n	8002728 <HAL_RCC_OscConfig+0x4a4>
 8002726:	e07b      	b.n	8002820 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d156      	bne.n	80027de <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002736:	495d      	ldr	r1, [pc, #372]	; (80028ac <HAL_RCC_OscConfig+0x628>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fb5c 	bl	8000df8 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fb57 	bl	8000df8 <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e09d      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	049b      	lsls	r3, r3, #18
 8002760:	4013      	ands	r3, r2
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002764:	4b4d      	ldr	r3, [pc, #308]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HAL_RCC_OscConfig+0x62c>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1a      	ldr	r2, [r3, #32]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	431a      	orrs	r2, r3
 8002792:	4b42      	ldr	r3, [pc, #264]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b40      	ldr	r3, [pc, #256]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	0449      	lsls	r1, r1, #17
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80027a6:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0549      	lsls	r1, r1, #21
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fb20 	bl	8000df8 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7fe fb1b 	bl	8000df8 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e061      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	049b      	lsls	r3, r3, #18
 80027d8:	4013      	ands	r3, r2
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x53a>
 80027dc:	e059      	b.n	8002892 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027de:	4b2f      	ldr	r3, [pc, #188]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_RCC_OscConfig+0x618>)
 80027e4:	4931      	ldr	r1, [pc, #196]	; (80028ac <HAL_RCC_OscConfig+0x628>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fb05 	bl	8000df8 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fb00 	bl	8000df8 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e046      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	049b      	lsls	r3, r3, #18
 800280e:	4013      	ands	r3, r2
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x618>)
 8002818:	4926      	ldr	r1, [pc, #152]	; (80028b4 <HAL_RCC_OscConfig+0x630>)
 800281a:	400a      	ands	r2, r1
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	e038      	b.n	8002892 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e033      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x618>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2203      	movs	r2, #3
 8002836:	401a      	ands	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	429a      	cmp	r2, r3
 800283e:	d126      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2270      	movs	r2, #112	; 0x70
 8002844:	401a      	ands	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d11f      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	23fe      	movs	r3, #254	; 0xfe
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	401a      	ands	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d116      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	23f8      	movs	r3, #248	; 0xf8
 8002864:	039b      	lsls	r3, r3, #14
 8002866:	401a      	ands	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d10e      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	23e0      	movs	r3, #224	; 0xe0
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	0f5b      	lsrs	r3, r3, #29
 8002884:	075a      	lsls	r2, r3, #29
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b008      	add	sp, #32
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	00001388 	.word	0x00001388
 80028a8:	efffffff 	.word	0xefffffff
 80028ac:	feffffff 	.word	0xfeffffff
 80028b0:	11c1808c 	.word	0x11c1808c
 80028b4:	eefefffc 	.word	0xeefefffc

080028b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0e9      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2207      	movs	r2, #7
 80028d2:	4013      	ands	r3, r2
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d91e      	bls.n	8002918 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2207      	movs	r2, #7
 80028e0:	4393      	bics	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fa84 	bl	8000df8 <HAL_GetTick>
 80028f0:	0003      	movs	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028f4:	e009      	b.n	800290a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7fe fa7f 	bl	8000df8 <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <HAL_RCC_ClockConfig+0x1f4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0ca      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800290a:	4b67      	ldr	r3, [pc, #412]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2207      	movs	r2, #7
 8002910:	4013      	ands	r3, r2
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d1ee      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d015      	beq.n	800294e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2204      	movs	r2, #4
 8002928:	4013      	ands	r3, r2
 800292a:	d006      	beq.n	800293a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800292c:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002932:	21e0      	movs	r1, #224	; 0xe0
 8002934:	01c9      	lsls	r1, r1, #7
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293a:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4a5d      	ldr	r2, [pc, #372]	; (8002ab4 <HAL_RCC_ClockConfig+0x1fc>)
 8002940:	4013      	ands	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	d057      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	4013      	ands	r3, r2
 800296a:	d12b      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e097      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	049b      	lsls	r3, r3, #18
 8002980:	4013      	ands	r3, r2
 8002982:	d11f      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e08b      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002990:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4013      	ands	r3, r2
 800299a:	d113      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e07f      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ac:	2202      	movs	r2, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e074      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b6:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e06d      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2207      	movs	r2, #7
 80029ca:	4393      	bics	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d8:	f7fe fa0e 	bl	8000df8 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fe fa09 	bl	8000df8 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <HAL_RCC_ClockConfig+0x1f4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e054      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2238      	movs	r2, #56	; 0x38
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ec      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	4013      	ands	r3, r2
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d21e      	bcs.n	8002a54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a28:	f7fe f9e6 	bl	8000df8 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f7fe f9e1 	bl	8000df8 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_RCC_ClockConfig+0x1f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e02c      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d1ee      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <HAL_RCC_ClockConfig+0x200>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a72:	f000 f829 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a76:	0001      	movs	r1, r0
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	220f      	movs	r2, #15
 8002a80:	401a      	ands	r2, r3
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCC_ClockConfig+0x204>)
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	58d3      	ldr	r3, [r2, r3]
 8002a88:	221f      	movs	r2, #31
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	40da      	lsrs	r2, r3
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_ClockConfig+0x208>)
 8002a92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x20c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7fe f951 	bl	8000d40 <HAL_InitTick>
 8002a9e:	0003      	movs	r3, r0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	00001388 	.word	0x00001388
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	fffff0ff 	.word	0xfffff0ff
 8002ab8:	ffff8fff 	.word	0xffff8fff
 8002abc:	08003f1c 	.word	0x08003f1c
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2238      	movs	r2, #56	; 0x38
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d10f      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0adb      	lsrs	r3, r3, #11
 8002ade:	2207      	movs	r2, #7
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aea:	6839      	ldr	r1, [r7, #0]
 8002aec:	4835      	ldr	r0, [pc, #212]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002aee:	f7fd fb11 	bl	8000114 <__udivsi3>
 8002af2:	0003      	movs	r3, r0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	e05d      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2238      	movs	r2, #56	; 0x38
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e054      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2238      	movs	r2, #56	; 0x38
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d138      	bne.n	8002b88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	2207      	movs	r2, #7
 8002b28:	4013      	ands	r3, r2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4824      	ldr	r0, [pc, #144]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b38:	f7fd faec 	bl	8000114 <__udivsi3>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	0019      	movs	r1, r3
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	227f      	movs	r2, #127	; 0x7f
 8002b48:	4013      	ands	r3, r2
 8002b4a:	434b      	muls	r3, r1
 8002b4c:	617b      	str	r3, [r7, #20]
        break;
 8002b4e:	e00d      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	481c      	ldr	r0, [pc, #112]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b54:	f7fd fade 	bl	8000114 <__udivsi3>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	227f      	movs	r2, #127	; 0x7f
 8002b64:	4013      	ands	r3, r2
 8002b66:	434b      	muls	r3, r1
 8002b68:	617b      	str	r3, [r7, #20]
        break;
 8002b6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0f5b      	lsrs	r3, r3, #29
 8002b72:	2207      	movs	r2, #7
 8002b74:	4013      	ands	r3, r2
 8002b76:	3301      	adds	r3, #1
 8002b78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	6978      	ldr	r0, [r7, #20]
 8002b7e:	f7fd fac9 	bl	8000114 <__udivsi3>
 8002b82:	0003      	movs	r3, r0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2238      	movs	r2, #56	; 0x38
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d103      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2238      	movs	r2, #56	; 0x38
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b18      	cmp	r3, #24
 8002ba6:	d103      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ba8:	23fa      	movs	r3, #250	; 0xfa
 8002baa:	01db      	lsls	r3, r3, #7
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e001      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002bb4:	693b      	ldr	r3, [r7, #16]
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	007a1200 	.word	0x007a1200

08002bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	20000000 	.word	0x20000000

08002be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002be4:	f7ff fff2 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002be8:	0004      	movs	r4, r0
 8002bea:	f7ff fb3f 	bl	800226c <LL_RCC_GetAPB1Prescaler>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	0b1a      	lsrs	r2, r3, #12
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	58d3      	ldr	r3, [r2, r3]
 8002bf8:	221f      	movs	r2, #31
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	40dc      	lsrs	r4, r3
 8002bfe:	0023      	movs	r3, r4
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bdb0      	pop	{r4, r5, r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	08003f5c 	.word	0x08003f5c

08002c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c14:	2313      	movs	r3, #19
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c1c:	2312      	movs	r3, #18
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	029b      	lsls	r3, r3, #10
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c30:	e0a3      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2011      	movs	r0, #17
 8002c34:	183b      	adds	r3, r7, r0
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4bc3      	ldr	r3, [pc, #780]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	055b      	lsls	r3, r3, #21
 8002c42:	4013      	ands	r3, r2
 8002c44:	d110      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4bc0      	ldr	r3, [pc, #768]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4a:	4bbf      	ldr	r3, [pc, #764]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0549      	lsls	r1, r1, #21
 8002c50:	430a      	orrs	r2, r1
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c54:	4bbc      	ldr	r3, [pc, #752]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	055b      	lsls	r3, r3, #21
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c68:	4bb8      	ldr	r3, [pc, #736]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4bb7      	ldr	r3, [pc, #732]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	0049      	lsls	r1, r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c76:	f7fe f8bf 	bl	8000df8 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c80:	f7fe f8ba 	bl	8000df8 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d904      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c8e:	2313      	movs	r3, #19
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	2203      	movs	r2, #3
 8002c94:	701a      	strb	r2, [r3, #0]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c98:	4bac      	ldr	r3, [pc, #688]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d0ed      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ca4:	2313      	movs	r3, #19
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d154      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cae:	4ba6      	ldr	r3, [pc, #664]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d019      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d014      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cca:	4b9f      	ldr	r3, [pc, #636]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	4aa0      	ldr	r2, [pc, #640]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd4:	4b9c      	ldr	r3, [pc, #624]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd8:	4b9b      	ldr	r3, [pc, #620]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	0249      	lsls	r1, r1, #9
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b99      	ldr	r3, [pc, #612]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ce6:	4b98      	ldr	r3, [pc, #608]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce8:	499a      	ldr	r1, [pc, #616]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002cea:	400a      	ands	r2, r1
 8002cec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cee:	4b96      	ldr	r3, [pc, #600]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d016      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f87c 	bl	8000df8 <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d04:	e00c      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe f877 	bl	8000df8 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	4a91      	ldr	r2, [pc, #580]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d904      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d16:	2313      	movs	r3, #19
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	701a      	strb	r2, [r3, #0]
            break;
 8002d1e:	e004      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0ed      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d2a:	2313      	movs	r3, #19
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d34:	4b84      	ldr	r3, [pc, #528]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	4a85      	ldr	r2, [pc, #532]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d44:	430a      	orrs	r2, r1
 8002d46:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d48:	e00c      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d4a:	2312      	movs	r3, #18
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2213      	movs	r2, #19
 8002d50:	18ba      	adds	r2, r7, r2
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	e005      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	2312      	movs	r3, #18
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2213      	movs	r2, #19
 8002d5e:	18ba      	adds	r2, r7, r2
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d64:	2311      	movs	r3, #17
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d105      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d72:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d74:	4979      	ldr	r1, [pc, #484]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d84:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da2:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	220c      	movs	r2, #12
 8002da8:	4393      	bics	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2210      	movs	r2, #16
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d009      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	4a66      	ldr	r2, [pc, #408]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de0:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	4a5f      	ldr	r2, [pc, #380]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e00:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	0019      	movs	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	01db      	lsls	r3, r3, #7
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d015      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e3e:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	0899      	lsrs	r1, r3, #2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	4b3f      	ldr	r3, [pc, #252]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	0249      	lsls	r1, r1, #9
 8002e66:	430a      	orrs	r2, r1
 8002e68:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	031b      	lsls	r3, r3, #12
 8002e72:	4013      	ands	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e84:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e86:	430a      	orrs	r2, r1
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	039b      	lsls	r3, r3, #14
 8002e92:	4013      	ands	r3, r2
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	4a35      	ldr	r2, [pc, #212]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	03db      	lsls	r3, r3, #15
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ebc:	2180      	movs	r1, #128	; 0x80
 8002ebe:	0449      	lsls	r1, r1, #17
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	03db      	lsls	r3, r3, #15
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d016      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	4a27      	ldr	r2, [pc, #156]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ede:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	045b      	lsls	r3, r3, #17
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d106      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0449      	lsls	r1, r1, #17
 8002efa:	430a      	orrs	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4013      	ands	r3, r2
 8002f08:	d016      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	01db      	lsls	r3, r3, #7
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d106      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	0249      	lsls	r1, r1, #9
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f38:	2312      	movs	r3, #18
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b006      	add	sp, #24
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	fffffcff 	.word	0xfffffcff
 8002f54:	fffeffff 	.word	0xfffeffff
 8002f58:	00001388 	.word	0x00001388
 8002f5c:	efffffff 	.word	0xefffffff
 8002f60:	fffff3ff 	.word	0xfffff3ff
 8002f64:	fff3ffff 	.word	0xfff3ffff
 8002f68:	ffcfffff 	.word	0xffcfffff
 8002f6c:	ffffcfff 	.word	0xffffcfff
 8002f70:	ffbfffff 	.word	0xffbfffff
 8002f74:	feffffff 	.word	0xfeffffff
 8002f78:	ffff3fff 	.word	0xffff3fff

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e04a      	b.n	8003024 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	223d      	movs	r2, #61	; 0x3d
 8002f92:	5c9b      	ldrb	r3, [r3, r2]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	223c      	movs	r2, #60	; 0x3c
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fd fd7f 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	223d      	movs	r2, #61	; 0x3d
 8002fae:	2102      	movs	r1, #2
 8002fb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	0019      	movs	r1, r3
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	f000 f889 	bl	80030d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2248      	movs	r2, #72	; 0x48
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	223e      	movs	r2, #62	; 0x3e
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	2101      	movs	r1, #1
 8002fe0:	5499      	strb	r1, [r3, r2]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2241      	movs	r2, #65	; 0x41
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2242      	movs	r2, #66	; 0x42
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2243      	movs	r2, #67	; 0x43
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2244      	movs	r2, #68	; 0x44
 8002ffe:	2101      	movs	r1, #1
 8003000:	5499      	strb	r1, [r3, r2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2245      	movs	r2, #69	; 0x45
 8003006:	2101      	movs	r1, #1
 8003008:	5499      	strb	r1, [r3, r2]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2246      	movs	r2, #70	; 0x46
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2247      	movs	r2, #71	; 0x47
 8003016:	2101      	movs	r1, #1
 8003018:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	223d      	movs	r2, #61	; 0x3d
 800301e:	2101      	movs	r1, #1
 8003020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	223d      	movs	r2, #61	; 0x3d
 8003038:	5c9b      	ldrb	r3, [r3, r2]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d001      	beq.n	8003044 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e03a      	b.n	80030ba <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	223d      	movs	r2, #61	; 0x3d
 8003048:	2102      	movs	r1, #2
 800304a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_TIM_Base_Start+0x98>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00f      	beq.n	8003076 <HAL_TIM_Base_Start+0x4a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	05db      	lsls	r3, r3, #23
 800305e:	429a      	cmp	r2, r3
 8003060:	d009      	beq.n	8003076 <HAL_TIM_Base_Start+0x4a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_TIM_Base_Start+0x9c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIM_Base_Start+0x4a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_TIM_Base_Start+0xa0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d116      	bne.n	80030a4 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_TIM_Base_Start+0xa4>)
 800307e:	4013      	ands	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d016      	beq.n	80030b6 <HAL_TIM_Base_Start+0x8a>
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	025b      	lsls	r3, r3, #9
 800308e:	429a      	cmp	r2, r3
 8003090:	d011      	beq.n	80030b6 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	e008      	b.n	80030b6 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e000      	b.n	80030b8 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	00010007 	.word	0x00010007

080030d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <TIM_Base_SetConfig+0xe4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d008      	beq.n	80030fe <TIM_Base_SetConfig+0x2a>
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	05db      	lsls	r3, r3, #23
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0x2a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a30      	ldr	r2, [pc, #192]	; (80031bc <TIM_Base_SetConfig+0xe8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2270      	movs	r2, #112	; 0x70
 8003102:	4393      	bics	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a29      	ldr	r2, [pc, #164]	; (80031b8 <TIM_Base_SetConfig+0xe4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <TIM_Base_SetConfig+0x76>
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	05db      	lsls	r3, r3, #23
 800311e:	429a      	cmp	r2, r3
 8003120:	d013      	beq.n	800314a <TIM_Base_SetConfig+0x76>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <TIM_Base_SetConfig+0xe8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00f      	beq.n	800314a <TIM_Base_SetConfig+0x76>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <TIM_Base_SetConfig+0xec>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_Base_SetConfig+0x76>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <TIM_Base_SetConfig+0xf0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0x76>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <TIM_Base_SetConfig+0xf4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0x76>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a21      	ldr	r2, [pc, #132]	; (80031cc <TIM_Base_SetConfig+0xf8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <TIM_Base_SetConfig+0xfc>)
 800314e:	4013      	ands	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	4393      	bics	r3, r2
 8003162:	001a      	movs	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <TIM_Base_SetConfig+0xe4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0xce>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <TIM_Base_SetConfig+0xf0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0xce>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <TIM_Base_SetConfig+0xf4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0xce>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <TIM_Base_SetConfig+0xf8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d103      	bne.n	80031aa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	615a      	str	r2, [r3, #20]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40002000 	.word	0x40002000
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40014400 	.word	0x40014400
 80031cc:	40014800 	.word	0x40014800
 80031d0:	fffffcff 	.word	0xfffffcff

080031d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	223c      	movs	r2, #60	; 0x3c
 80031e2:	5c9b      	ldrb	r3, [r3, r2]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e055      	b.n	8003298 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	223c      	movs	r2, #60	; 0x3c
 80031f0:	2101      	movs	r1, #1
 80031f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	223d      	movs	r2, #61	; 0x3d
 80031f8:	2102      	movs	r1, #2
 80031fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a23      	ldr	r2, [pc, #140]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800321a:	4013      	ands	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2270      	movs	r2, #112	; 0x70
 800322c:	4393      	bics	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a16      	ldr	r2, [pc, #88]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00f      	beq.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	05db      	lsls	r3, r3, #23
 8003254:	429a      	cmp	r2, r3
 8003256:	d009      	beq.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a11      	ldr	r2, [pc, #68]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10c      	bne.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2280      	movs	r2, #128	; 0x80
 8003270:	4393      	bics	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	4313      	orrs	r3, r2
 800327c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223d      	movs	r2, #61	; 0x3d
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	223c      	movs	r2, #60	; 0x3c
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	ff0fffff 	.word	0xff0fffff
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40014000 	.word	0x40014000

080032b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e046      	b.n	8003350 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2288      	movs	r2, #136	; 0x88
 80032c6:	589b      	ldr	r3, [r3, r2]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2284      	movs	r2, #132	; 0x84
 80032d0:	2100      	movs	r1, #0
 80032d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7fd fc04 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2288      	movs	r2, #136	; 0x88
 80032e0:	2124      	movs	r1, #36	; 0x24
 80032e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2101      	movs	r1, #1
 80032f0:	438a      	bics	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f830 	bl	800335c <UART_SetConfig>
 80032fc:	0003      	movs	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e024      	b.n	8003350 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fae1 	bl	80038d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	490d      	ldr	r1, [pc, #52]	; (8003358 <HAL_UART_Init+0xa8>)
 8003322:	400a      	ands	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	212a      	movs	r1, #42	; 0x2a
 8003332:	438a      	bics	r2, r1
 8003334:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fb79 	bl	8003a40 <UART_CheckIdleState>
 800334e:	0003      	movs	r3, r0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}
 8003358:	ffffb7ff 	.word	0xffffb7ff

0800335c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800335c:	b5b0      	push	{r4, r5, r7, lr}
 800335e:	b090      	sub	sp, #64	; 0x40
 8003360:	af00      	add	r7, sp, #0
 8003362:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003364:	231a      	movs	r3, #26
 8003366:	2220      	movs	r2, #32
 8003368:	189b      	adds	r3, r3, r2
 800336a:	19db      	adds	r3, r3, r7
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	431a      	orrs	r2, r3
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	431a      	orrs	r2, r3
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	4313      	orrs	r3, r2
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4aaf      	ldr	r2, [pc, #700]	; (800364c <UART_SetConfig+0x2f0>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	430b      	orrs	r3, r1
 800339c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4aaa      	ldr	r2, [pc, #680]	; (8003650 <UART_SetConfig+0x2f4>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	0018      	movs	r0, r3
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	68d9      	ldr	r1, [r3, #12]
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	0003      	movs	r3, r0
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4aa4      	ldr	r2, [pc, #656]	; (8003654 <UART_SetConfig+0x2f8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ce:	4313      	orrs	r3, r2
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a9f      	ldr	r2, [pc, #636]	; (8003658 <UART_SetConfig+0x2fc>)
 80033da:	4013      	ands	r3, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	220f      	movs	r2, #15
 80033f0:	4393      	bics	r3, r2
 80033f2:	0018      	movs	r0, r3
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	0003      	movs	r3, r0
 80033fe:	430b      	orrs	r3, r1
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a95      	ldr	r2, [pc, #596]	; (800365c <UART_SetConfig+0x300>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d131      	bne.n	8003470 <UART_SetConfig+0x114>
 800340c:	4b94      	ldr	r3, [pc, #592]	; (8003660 <UART_SetConfig+0x304>)
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	2203      	movs	r2, #3
 8003412:	4013      	ands	r3, r2
 8003414:	2b03      	cmp	r3, #3
 8003416:	d01d      	beq.n	8003454 <UART_SetConfig+0xf8>
 8003418:	d823      	bhi.n	8003462 <UART_SetConfig+0x106>
 800341a:	2b02      	cmp	r3, #2
 800341c:	d00c      	beq.n	8003438 <UART_SetConfig+0xdc>
 800341e:	d820      	bhi.n	8003462 <UART_SetConfig+0x106>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <UART_SetConfig+0xce>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d00e      	beq.n	8003446 <UART_SetConfig+0xea>
 8003428:	e01b      	b.n	8003462 <UART_SetConfig+0x106>
 800342a:	231b      	movs	r3, #27
 800342c:	2220      	movs	r2, #32
 800342e:	189b      	adds	r3, r3, r2
 8003430:	19db      	adds	r3, r3, r7
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	e0b4      	b.n	80035a2 <UART_SetConfig+0x246>
 8003438:	231b      	movs	r3, #27
 800343a:	2220      	movs	r2, #32
 800343c:	189b      	adds	r3, r3, r2
 800343e:	19db      	adds	r3, r3, r7
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e0ad      	b.n	80035a2 <UART_SetConfig+0x246>
 8003446:	231b      	movs	r3, #27
 8003448:	2220      	movs	r2, #32
 800344a:	189b      	adds	r3, r3, r2
 800344c:	19db      	adds	r3, r3, r7
 800344e:	2204      	movs	r2, #4
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e0a6      	b.n	80035a2 <UART_SetConfig+0x246>
 8003454:	231b      	movs	r3, #27
 8003456:	2220      	movs	r2, #32
 8003458:	189b      	adds	r3, r3, r2
 800345a:	19db      	adds	r3, r3, r7
 800345c:	2208      	movs	r2, #8
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e09f      	b.n	80035a2 <UART_SetConfig+0x246>
 8003462:	231b      	movs	r3, #27
 8003464:	2220      	movs	r2, #32
 8003466:	189b      	adds	r3, r3, r2
 8003468:	19db      	adds	r3, r3, r7
 800346a:	2210      	movs	r2, #16
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e098      	b.n	80035a2 <UART_SetConfig+0x246>
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7b      	ldr	r2, [pc, #492]	; (8003664 <UART_SetConfig+0x308>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d131      	bne.n	80034de <UART_SetConfig+0x182>
 800347a:	4b79      	ldr	r3, [pc, #484]	; (8003660 <UART_SetConfig+0x304>)
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	220c      	movs	r2, #12
 8003480:	4013      	ands	r3, r2
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d01d      	beq.n	80034c2 <UART_SetConfig+0x166>
 8003486:	d823      	bhi.n	80034d0 <UART_SetConfig+0x174>
 8003488:	2b08      	cmp	r3, #8
 800348a:	d00c      	beq.n	80034a6 <UART_SetConfig+0x14a>
 800348c:	d820      	bhi.n	80034d0 <UART_SetConfig+0x174>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <UART_SetConfig+0x13c>
 8003492:	2b04      	cmp	r3, #4
 8003494:	d00e      	beq.n	80034b4 <UART_SetConfig+0x158>
 8003496:	e01b      	b.n	80034d0 <UART_SetConfig+0x174>
 8003498:	231b      	movs	r3, #27
 800349a:	2220      	movs	r2, #32
 800349c:	189b      	adds	r3, r3, r2
 800349e:	19db      	adds	r3, r3, r7
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e07d      	b.n	80035a2 <UART_SetConfig+0x246>
 80034a6:	231b      	movs	r3, #27
 80034a8:	2220      	movs	r2, #32
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e076      	b.n	80035a2 <UART_SetConfig+0x246>
 80034b4:	231b      	movs	r3, #27
 80034b6:	2220      	movs	r2, #32
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2204      	movs	r2, #4
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e06f      	b.n	80035a2 <UART_SetConfig+0x246>
 80034c2:	231b      	movs	r3, #27
 80034c4:	2220      	movs	r2, #32
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	2208      	movs	r2, #8
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e068      	b.n	80035a2 <UART_SetConfig+0x246>
 80034d0:	231b      	movs	r3, #27
 80034d2:	2220      	movs	r2, #32
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	2210      	movs	r2, #16
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e061      	b.n	80035a2 <UART_SetConfig+0x246>
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a61      	ldr	r2, [pc, #388]	; (8003668 <UART_SetConfig+0x30c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d106      	bne.n	80034f6 <UART_SetConfig+0x19a>
 80034e8:	231b      	movs	r3, #27
 80034ea:	2220      	movs	r2, #32
 80034ec:	189b      	adds	r3, r3, r2
 80034ee:	19db      	adds	r3, r3, r7
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e055      	b.n	80035a2 <UART_SetConfig+0x246>
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5c      	ldr	r2, [pc, #368]	; (800366c <UART_SetConfig+0x310>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d106      	bne.n	800350e <UART_SetConfig+0x1b2>
 8003500:	231b      	movs	r3, #27
 8003502:	2220      	movs	r2, #32
 8003504:	189b      	adds	r3, r3, r2
 8003506:	19db      	adds	r3, r3, r7
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	e049      	b.n	80035a2 <UART_SetConfig+0x246>
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a50      	ldr	r2, [pc, #320]	; (8003654 <UART_SetConfig+0x2f8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d13e      	bne.n	8003596 <UART_SetConfig+0x23a>
 8003518:	4b51      	ldr	r3, [pc, #324]	; (8003660 <UART_SetConfig+0x304>)
 800351a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800351c:	23c0      	movs	r3, #192	; 0xc0
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	4013      	ands	r3, r2
 8003522:	22c0      	movs	r2, #192	; 0xc0
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	4293      	cmp	r3, r2
 8003528:	d027      	beq.n	800357a <UART_SetConfig+0x21e>
 800352a:	22c0      	movs	r2, #192	; 0xc0
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	4293      	cmp	r3, r2
 8003530:	d82a      	bhi.n	8003588 <UART_SetConfig+0x22c>
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	4293      	cmp	r3, r2
 8003538:	d011      	beq.n	800355e <UART_SetConfig+0x202>
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	4293      	cmp	r3, r2
 8003540:	d822      	bhi.n	8003588 <UART_SetConfig+0x22c>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <UART_SetConfig+0x1f4>
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	00d2      	lsls	r2, r2, #3
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <UART_SetConfig+0x210>
 800354e:	e01b      	b.n	8003588 <UART_SetConfig+0x22c>
 8003550:	231b      	movs	r3, #27
 8003552:	2220      	movs	r2, #32
 8003554:	189b      	adds	r3, r3, r2
 8003556:	19db      	adds	r3, r3, r7
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e021      	b.n	80035a2 <UART_SetConfig+0x246>
 800355e:	231b      	movs	r3, #27
 8003560:	2220      	movs	r2, #32
 8003562:	189b      	adds	r3, r3, r2
 8003564:	19db      	adds	r3, r3, r7
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e01a      	b.n	80035a2 <UART_SetConfig+0x246>
 800356c:	231b      	movs	r3, #27
 800356e:	2220      	movs	r2, #32
 8003570:	189b      	adds	r3, r3, r2
 8003572:	19db      	adds	r3, r3, r7
 8003574:	2204      	movs	r2, #4
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e013      	b.n	80035a2 <UART_SetConfig+0x246>
 800357a:	231b      	movs	r3, #27
 800357c:	2220      	movs	r2, #32
 800357e:	189b      	adds	r3, r3, r2
 8003580:	19db      	adds	r3, r3, r7
 8003582:	2208      	movs	r2, #8
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e00c      	b.n	80035a2 <UART_SetConfig+0x246>
 8003588:	231b      	movs	r3, #27
 800358a:	2220      	movs	r2, #32
 800358c:	189b      	adds	r3, r3, r2
 800358e:	19db      	adds	r3, r3, r7
 8003590:	2210      	movs	r2, #16
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e005      	b.n	80035a2 <UART_SetConfig+0x246>
 8003596:	231b      	movs	r3, #27
 8003598:	2220      	movs	r2, #32
 800359a:	189b      	adds	r3, r3, r2
 800359c:	19db      	adds	r3, r3, r7
 800359e:	2210      	movs	r2, #16
 80035a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2b      	ldr	r2, [pc, #172]	; (8003654 <UART_SetConfig+0x2f8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d000      	beq.n	80035ae <UART_SetConfig+0x252>
 80035ac:	e0a9      	b.n	8003702 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035ae:	231b      	movs	r3, #27
 80035b0:	2220      	movs	r2, #32
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	19db      	adds	r3, r3, r7
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d015      	beq.n	80035e8 <UART_SetConfig+0x28c>
 80035bc:	dc18      	bgt.n	80035f0 <UART_SetConfig+0x294>
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d00d      	beq.n	80035de <UART_SetConfig+0x282>
 80035c2:	dc15      	bgt.n	80035f0 <UART_SetConfig+0x294>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <UART_SetConfig+0x272>
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d005      	beq.n	80035d8 <UART_SetConfig+0x27c>
 80035cc:	e010      	b.n	80035f0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ce:	f7ff fb07 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 80035d2:	0003      	movs	r3, r0
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035d6:	e014      	b.n	8003602 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <UART_SetConfig+0x314>)
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035dc:	e011      	b.n	8003602 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035de:	f7ff fa73 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 80035e2:	0003      	movs	r3, r0
 80035e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035e6:	e00c      	b.n	8003602 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ee:	e008      	b.n	8003602 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035f4:	231a      	movs	r3, #26
 80035f6:	2220      	movs	r2, #32
 80035f8:	189b      	adds	r3, r3, r2
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
        break;
 8003600:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d100      	bne.n	800360a <UART_SetConfig+0x2ae>
 8003608:	e14b      	b.n	80038a2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <UART_SetConfig+0x318>)
 8003610:	0052      	lsls	r2, r2, #1
 8003612:	5ad3      	ldrh	r3, [r2, r3]
 8003614:	0019      	movs	r1, r3
 8003616:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003618:	f7fc fd7c 	bl	8000114 <__udivsi3>
 800361c:	0003      	movs	r3, r0
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	0013      	movs	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	189b      	adds	r3, r3, r2
 800362a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800362c:	429a      	cmp	r2, r3
 800362e:	d305      	bcc.n	800363c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003638:	429a      	cmp	r2, r3
 800363a:	d91d      	bls.n	8003678 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800363c:	231a      	movs	r3, #26
 800363e:	2220      	movs	r2, #32
 8003640:	189b      	adds	r3, r3, r2
 8003642:	19db      	adds	r3, r3, r7
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e12b      	b.n	80038a2 <UART_SetConfig+0x546>
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	cfff69f3 	.word	0xcfff69f3
 8003650:	ffffcfff 	.word	0xffffcfff
 8003654:	40008000 	.word	0x40008000
 8003658:	11fff4ff 	.word	0x11fff4ff
 800365c:	40013800 	.word	0x40013800
 8003660:	40021000 	.word	0x40021000
 8003664:	40004400 	.word	0x40004400
 8003668:	40004800 	.word	0x40004800
 800366c:	40004c00 	.word	0x40004c00
 8003670:	00f42400 	.word	0x00f42400
 8003674:	08003f7c 	.word	0x08003f7c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003684:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <UART_SetConfig+0x574>)
 8003686:	0052      	lsls	r2, r2, #1
 8003688:	5ad3      	ldrh	r3, [r2, r3]
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	69b8      	ldr	r0, [r7, #24]
 8003696:	69f9      	ldr	r1, [r7, #28]
 8003698:	f7fc feb2 	bl	8000400 <__aeabi_uldivmod>
 800369c:	0002      	movs	r2, r0
 800369e:	000b      	movs	r3, r1
 80036a0:	0e11      	lsrs	r1, r2, #24
 80036a2:	021d      	lsls	r5, r3, #8
 80036a4:	430d      	orrs	r5, r1
 80036a6:	0214      	lsls	r4, r2, #8
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68b8      	ldr	r0, [r7, #8]
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	1900      	adds	r0, r0, r4
 80036ba:	4169      	adcs	r1, r5
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f7fc fe99 	bl	8000400 <__aeabi_uldivmod>
 80036ce:	0002      	movs	r2, r0
 80036d0:	000b      	movs	r3, r1
 80036d2:	0013      	movs	r3, r2
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d8:	23c0      	movs	r3, #192	; 0xc0
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	429a      	cmp	r2, r3
 80036de:	d309      	bcc.n	80036f4 <UART_SetConfig+0x398>
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	035b      	lsls	r3, r3, #13
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d204      	bcs.n	80036f4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e0d6      	b.n	80038a2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80036f4:	231a      	movs	r3, #26
 80036f6:	2220      	movs	r2, #32
 80036f8:	189b      	adds	r3, r3, r2
 80036fa:	19db      	adds	r3, r3, r7
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e0cf      	b.n	80038a2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	429a      	cmp	r2, r3
 800370c:	d000      	beq.n	8003710 <UART_SetConfig+0x3b4>
 800370e:	e070      	b.n	80037f2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003710:	231b      	movs	r3, #27
 8003712:	2220      	movs	r2, #32
 8003714:	189b      	adds	r3, r3, r2
 8003716:	19db      	adds	r3, r3, r7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b08      	cmp	r3, #8
 800371c:	d015      	beq.n	800374a <UART_SetConfig+0x3ee>
 800371e:	dc18      	bgt.n	8003752 <UART_SetConfig+0x3f6>
 8003720:	2b04      	cmp	r3, #4
 8003722:	d00d      	beq.n	8003740 <UART_SetConfig+0x3e4>
 8003724:	dc15      	bgt.n	8003752 <UART_SetConfig+0x3f6>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <UART_SetConfig+0x3d4>
 800372a:	2b02      	cmp	r3, #2
 800372c:	d005      	beq.n	800373a <UART_SetConfig+0x3de>
 800372e:	e010      	b.n	8003752 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003730:	f7ff fa56 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8003734:	0003      	movs	r3, r0
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003738:	e014      	b.n	8003764 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373a:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <UART_SetConfig+0x578>)
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800373e:	e011      	b.n	8003764 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003740:	f7ff f9c2 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8003744:	0003      	movs	r3, r0
 8003746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003748:	e00c      	b.n	8003764 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003750:	e008      	b.n	8003764 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003756:	231a      	movs	r3, #26
 8003758:	2220      	movs	r2, #32
 800375a:	189b      	adds	r3, r3, r2
 800375c:	19db      	adds	r3, r3, r7
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
        break;
 8003762:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	2b00      	cmp	r3, #0
 8003768:	d100      	bne.n	800376c <UART_SetConfig+0x410>
 800376a:	e09a      	b.n	80038a2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003770:	4b57      	ldr	r3, [pc, #348]	; (80038d0 <UART_SetConfig+0x574>)
 8003772:	0052      	lsls	r2, r2, #1
 8003774:	5ad3      	ldrh	r3, [r2, r3]
 8003776:	0019      	movs	r1, r3
 8003778:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800377a:	f7fc fccb 	bl	8000114 <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	005a      	lsls	r2, r3, #1
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	18d2      	adds	r2, r2, r3
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	0019      	movs	r1, r3
 8003790:	0010      	movs	r0, r2
 8003792:	f7fc fcbf 	bl	8000114 <__udivsi3>
 8003796:	0003      	movs	r3, r0
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d921      	bls.n	80037e4 <UART_SetConfig+0x488>
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	025b      	lsls	r3, r3, #9
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d21c      	bcs.n	80037e4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	200e      	movs	r0, #14
 80037b0:	2420      	movs	r4, #32
 80037b2:	1903      	adds	r3, r0, r4
 80037b4:	19db      	adds	r3, r3, r7
 80037b6:	210f      	movs	r1, #15
 80037b8:	438a      	bics	r2, r1
 80037ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2207      	movs	r2, #7
 80037c4:	4013      	ands	r3, r2
 80037c6:	b299      	uxth	r1, r3
 80037c8:	1903      	adds	r3, r0, r4
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	1902      	adds	r2, r0, r4
 80037ce:	19d2      	adds	r2, r2, r7
 80037d0:	8812      	ldrh	r2, [r2, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	1902      	adds	r2, r0, r4
 80037dc:	19d2      	adds	r2, r2, r7
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e05e      	b.n	80038a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80037e4:	231a      	movs	r3, #26
 80037e6:	2220      	movs	r2, #32
 80037e8:	189b      	adds	r3, r3, r2
 80037ea:	19db      	adds	r3, r3, r7
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e057      	b.n	80038a2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f2:	231b      	movs	r3, #27
 80037f4:	2220      	movs	r2, #32
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	19db      	adds	r3, r3, r7
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d015      	beq.n	800382c <UART_SetConfig+0x4d0>
 8003800:	dc18      	bgt.n	8003834 <UART_SetConfig+0x4d8>
 8003802:	2b04      	cmp	r3, #4
 8003804:	d00d      	beq.n	8003822 <UART_SetConfig+0x4c6>
 8003806:	dc15      	bgt.n	8003834 <UART_SetConfig+0x4d8>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <UART_SetConfig+0x4b6>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d005      	beq.n	800381c <UART_SetConfig+0x4c0>
 8003810:	e010      	b.n	8003834 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003812:	f7ff f9e5 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 8003816:	0003      	movs	r3, r0
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800381a:	e014      	b.n	8003846 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <UART_SetConfig+0x578>)
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003820:	e011      	b.n	8003846 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003822:	f7ff f951 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8003826:	0003      	movs	r3, r0
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800382a:	e00c      	b.n	8003846 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003832:	e008      	b.n	8003846 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003838:	231a      	movs	r3, #26
 800383a:	2220      	movs	r2, #32
 800383c:	189b      	adds	r3, r3, r2
 800383e:	19db      	adds	r3, r3, r7
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
        break;
 8003844:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02a      	beq.n	80038a2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003850:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <UART_SetConfig+0x574>)
 8003852:	0052      	lsls	r2, r2, #1
 8003854:	5ad3      	ldrh	r3, [r2, r3]
 8003856:	0019      	movs	r1, r3
 8003858:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800385a:	f7fc fc5b 	bl	8000114 <__udivsi3>
 800385e:	0003      	movs	r3, r0
 8003860:	001a      	movs	r2, r3
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	18d2      	adds	r2, r2, r3
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0019      	movs	r1, r3
 8003870:	0010      	movs	r0, r2
 8003872:	f7fc fc4f 	bl	8000114 <__udivsi3>
 8003876:	0003      	movs	r3, r0
 8003878:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387c:	2b0f      	cmp	r3, #15
 800387e:	d90a      	bls.n	8003896 <UART_SetConfig+0x53a>
 8003880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	025b      	lsls	r3, r3, #9
 8003886:	429a      	cmp	r2, r3
 8003888:	d205      	bcs.n	8003896 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	b29a      	uxth	r2, r3
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	e005      	b.n	80038a2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003896:	231a      	movs	r3, #26
 8003898:	2220      	movs	r2, #32
 800389a:	189b      	adds	r3, r3, r2
 800389c:	19db      	adds	r3, r3, r7
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	226a      	movs	r2, #106	; 0x6a
 80038a6:	2101      	movs	r1, #1
 80038a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	2268      	movs	r2, #104	; 0x68
 80038ae:	2101      	movs	r1, #1
 80038b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	2200      	movs	r2, #0
 80038b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	2200      	movs	r2, #0
 80038bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80038be:	231a      	movs	r3, #26
 80038c0:	2220      	movs	r2, #32
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	19db      	adds	r3, r3, r7
 80038c6:	781b      	ldrb	r3, [r3, #0]
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b010      	add	sp, #64	; 0x40
 80038ce:	bdb0      	pop	{r4, r5, r7, pc}
 80038d0:	08003f7c 	.word	0x08003f7c
 80038d4:	00f42400 	.word	0x00f42400

080038d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00b      	beq.n	8003902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <UART_AdvFeatureConfig+0x144>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	d00b      	beq.n	8003924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a43      	ldr	r2, [pc, #268]	; (8003a20 <UART_AdvFeatureConfig+0x148>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	2204      	movs	r2, #4
 800392a:	4013      	ands	r3, r2
 800392c:	d00b      	beq.n	8003946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <UART_AdvFeatureConfig+0x14c>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	2208      	movs	r2, #8
 800394c:	4013      	ands	r3, r2
 800394e:	d00b      	beq.n	8003968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <UART_AdvFeatureConfig+0x150>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	2210      	movs	r2, #16
 800396e:	4013      	ands	r3, r2
 8003970:	d00b      	beq.n	800398a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <UART_AdvFeatureConfig+0x154>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	2220      	movs	r2, #32
 8003990:	4013      	ands	r3, r2
 8003992:	d00b      	beq.n	80039ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <UART_AdvFeatureConfig+0x158>)
 800399c:	4013      	ands	r3, r2
 800399e:	0019      	movs	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2240      	movs	r2, #64	; 0x40
 80039b2:	4013      	ands	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <UART_AdvFeatureConfig+0x15c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	035b      	lsls	r3, r3, #13
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d10b      	bne.n	80039f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <UART_AdvFeatureConfig+0x160>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	2280      	movs	r2, #128	; 0x80
 80039f8:	4013      	ands	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <UART_AdvFeatureConfig+0x164>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fffdffff 	.word	0xfffdffff
 8003a20:	fffeffff 	.word	0xfffeffff
 8003a24:	fffbffff 	.word	0xfffbffff
 8003a28:	ffff7fff 	.word	0xffff7fff
 8003a2c:	ffffefff 	.word	0xffffefff
 8003a30:	ffffdfff 	.word	0xffffdfff
 8003a34:	ffefffff 	.word	0xffefffff
 8003a38:	ff9fffff 	.word	0xff9fffff
 8003a3c:	fff7ffff 	.word	0xfff7ffff

08003a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2290      	movs	r2, #144	; 0x90
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a50:	f7fd f9d2 	bl	8000df8 <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2208      	movs	r2, #8
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d10c      	bne.n	8003a80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	0391      	lsls	r1, r2, #14
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <UART_CheckIdleState+0x98>)
 8003a70:	9200      	str	r2, [sp, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f000 f832 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d001      	beq.n	8003a80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e026      	b.n	8003ace <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2204      	movs	r2, #4
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d10c      	bne.n	8003aa8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	03d1      	lsls	r1, r2, #15
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <UART_CheckIdleState+0x98>)
 8003a98:	9200      	str	r2, [sp, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f000 f81e 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003aa0:	1e03      	subs	r3, r0, #0
 8003aa2:	d001      	beq.n	8003aa8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e012      	b.n	8003ace <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2288      	movs	r2, #136	; 0x88
 8003aac:	2120      	movs	r1, #32
 8003aae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	228c      	movs	r2, #140	; 0x8c
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2284      	movs	r2, #132	; 0x84
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b004      	add	sp, #16
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	01ffffff 	.word	0x01ffffff

08003adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b094      	sub	sp, #80	; 0x50
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	e0a7      	b.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003af0:	3301      	adds	r3, #1
 8003af2:	d100      	bne.n	8003af6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003af4:	e0a3      	b.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fd f97f 	bl	8000df8 <HAL_GetTick>
 8003afa:	0002      	movs	r2, r0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13f      	bne.n	8003b8c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b14:	647b      	str	r3, [r7, #68]	; 0x44
 8003b16:	2301      	movs	r3, #1
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	494e      	ldr	r1, [pc, #312]	; (8003c68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b2e:	400a      	ands	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40
 8003b48:	2301      	movs	r3, #1
 8003b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	f383 8810 	msr	PRIMASK, r3
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6a:	f383 8810 	msr	PRIMASK, r3
}
 8003b6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2288      	movs	r2, #136	; 0x88
 8003b74:	2120      	movs	r1, #32
 8003b76:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	228c      	movs	r2, #140	; 0x8c
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2284      	movs	r2, #132	; 0x84
 8003b84:	2100      	movs	r1, #0
 8003b86:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e069      	b.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2204      	movs	r2, #4
 8003b94:	4013      	ands	r3, r2
 8003b96:	d052      	beq.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d148      	bne.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bba:	613b      	str	r3, [r7, #16]
  return(result);
 8003bbc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f383 8810 	msr	PRIMASK, r3
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4924      	ldr	r1, [pc, #144]	; (8003c68 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	f383 8810 	msr	PRIMASK, r3
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2288      	movs	r2, #136	; 0x88
 8003c1e:	2120      	movs	r1, #32
 8003c20:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	228c      	movs	r2, #140	; 0x8c
 8003c26:	2120      	movs	r1, #32
 8003c28:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2290      	movs	r2, #144	; 0x90
 8003c2e:	2120      	movs	r1, #32
 8003c30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2284      	movs	r2, #132	; 0x84
 8003c36:	2100      	movs	r1, #0
 8003c38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e010      	b.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	4013      	ands	r3, r2
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	425a      	negs	r2, r3
 8003c4e:	4153      	adcs	r3, r2
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	001a      	movs	r2, r3
 8003c54:	1dfb      	adds	r3, r7, #7
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d100      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x182>
 8003c5c:	e747      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b014      	add	sp, #80	; 0x50
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	fffffe5f 	.word	0xfffffe5f

08003c6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2284      	movs	r2, #132	; 0x84
 8003c78:	5c9b      	ldrb	r3, [r3, r2]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e027      	b.n	8003cd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2284      	movs	r2, #132	; 0x84
 8003c86:	2101      	movs	r1, #1
 8003c88:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2288      	movs	r2, #136	; 0x88
 8003c8e:	2124      	movs	r1, #36	; 0x24
 8003c90:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	438a      	bics	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <HAL_UARTEx_DisableFifoMode+0x70>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2288      	movs	r2, #136	; 0x88
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2284      	movs	r2, #132	; 0x84
 8003ccc:	2100      	movs	r1, #0
 8003cce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	dfffffff 	.word	0xdfffffff

08003ce0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2284      	movs	r2, #132	; 0x84
 8003cee:	5c9b      	ldrb	r3, [r3, r2]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e02e      	b.n	8003d56 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2284      	movs	r2, #132	; 0x84
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2288      	movs	r2, #136	; 0x88
 8003d04:	2124      	movs	r1, #36	; 0x24
 8003d06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	08d9      	lsrs	r1, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 f854 	bl	8003de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2288      	movs	r2, #136	; 0x88
 8003d48:	2120      	movs	r1, #32
 8003d4a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2284      	movs	r2, #132	; 0x84
 8003d50:	2100      	movs	r1, #0
 8003d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2284      	movs	r2, #132	; 0x84
 8003d6e:	5c9b      	ldrb	r3, [r3, r2]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e02f      	b.n	8003dd8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2284      	movs	r2, #132	; 0x84
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2288      	movs	r2, #136	; 0x88
 8003d84:	2124      	movs	r1, #36	; 0x24
 8003d86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	0019      	movs	r1, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f000 f813 	bl	8003de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2288      	movs	r2, #136	; 0x88
 8003dca:	2120      	movs	r1, #32
 8003dcc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2284      	movs	r2, #132	; 0x84
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b004      	add	sp, #16
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	f1ffffff 	.word	0xf1ffffff

08003de4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d108      	bne.n	8003e06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	226a      	movs	r2, #106	; 0x6a
 8003df8:	2101      	movs	r1, #1
 8003dfa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2268      	movs	r2, #104	; 0x68
 8003e00:	2101      	movs	r1, #1
 8003e02:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e04:	e043      	b.n	8003e8e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e06:	260f      	movs	r6, #15
 8003e08:	19bb      	adds	r3, r7, r6
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e0e:	200e      	movs	r0, #14
 8003e10:	183b      	adds	r3, r7, r0
 8003e12:	2208      	movs	r2, #8
 8003e14:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	0e5b      	lsrs	r3, r3, #25
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	240d      	movs	r4, #13
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	2107      	movs	r1, #7
 8003e26:	400a      	ands	r2, r1
 8003e28:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	0f5b      	lsrs	r3, r3, #29
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	250c      	movs	r5, #12
 8003e36:	197b      	adds	r3, r7, r5
 8003e38:	2107      	movs	r1, #7
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e3e:	183b      	adds	r3, r7, r0
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	197a      	adds	r2, r7, r5
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	4914      	ldr	r1, [pc, #80]	; (8003e98 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e48:	5c8a      	ldrb	r2, [r1, r2]
 8003e4a:	435a      	muls	r2, r3
 8003e4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e4e:	197b      	adds	r3, r7, r5
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <UARTEx_SetNbDataToProcess+0xb8>)
 8003e54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e56:	0019      	movs	r1, r3
 8003e58:	f7fc f9e6 	bl	8000228 <__divsi3>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	b299      	uxth	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	226a      	movs	r2, #106	; 0x6a
 8003e64:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e66:	19bb      	adds	r3, r7, r6
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	193a      	adds	r2, r7, r4
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	490a      	ldr	r1, [pc, #40]	; (8003e98 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e70:	5c8a      	ldrb	r2, [r1, r2]
 8003e72:	435a      	muls	r2, r3
 8003e74:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e76:	193b      	adds	r3, r7, r4
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <UARTEx_SetNbDataToProcess+0xb8>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e7e:	0019      	movs	r1, r3
 8003e80:	f7fc f9d2 	bl	8000228 <__divsi3>
 8003e84:	0003      	movs	r3, r0
 8003e86:	b299      	uxth	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2268      	movs	r2, #104	; 0x68
 8003e8c:	5299      	strh	r1, [r3, r2]
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b005      	add	sp, #20
 8003e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	08003f94 	.word	0x08003f94
 8003e9c:	08003f9c 	.word	0x08003f9c

08003ea0 <memset>:
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	1882      	adds	r2, r0, r2
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	7019      	strb	r1, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	4c0c      	ldr	r4, [pc, #48]	; (8003ee8 <__libc_init_array+0x38>)
 8003eb6:	4d0d      	ldr	r5, [pc, #52]	; (8003eec <__libc_init_array+0x3c>)
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	f000 f819 	bl	8003ef8 <_init>
 8003ec6:	4c0a      	ldr	r4, [pc, #40]	; (8003ef0 <__libc_init_array+0x40>)
 8003ec8:	4d0a      	ldr	r5, [pc, #40]	; (8003ef4 <__libc_init_array+0x44>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	00b3      	lsls	r3, r6, #2
 8003ed6:	58eb      	ldr	r3, [r5, r3]
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	00b3      	lsls	r3, r6, #2
 8003ee0:	58eb      	ldr	r3, [r5, r3]
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	08003fac 	.word	0x08003fac
 8003eec:	08003fac 	.word	0x08003fac
 8003ef0:	08003fb0 	.word	0x08003fb0
 8003ef4:	08003fac 	.word	0x08003fac

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
