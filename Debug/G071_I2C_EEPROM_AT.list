
G071_I2C_EEPROM_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf8  08003bf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08003c0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003c0c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131c7  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b9  00000000  00000000  0003323e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  000358f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d5c  00000000  00000000  000369d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194f4  00000000  00000000  00037734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c6b  00000000  00000000  00050c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a315b  00000000  00000000  00066893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003de8  00000000  00000000  001099f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0010d7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003b44 	.word	0x08003b44

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003b44 	.word	0x08003b44

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t addrEEP;
	char* dataEEP="Dobrý den";
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <main+0x48>)
 8000634:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fb1f 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f81f 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f94b 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 f8fb 	bl	800083c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000646:	f000 f877 	bl	8000738 <MX_I2C1_Init>
  MX_TIM7_Init();
 800064a:	f000 f8bb 	bl	80007c4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x4c>)
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fb11 	bl	8002c78 <HAL_TIM_Base_Start>
  //test_EEPROM();
  addrEEP=0x03;
 8000656:	1cbb      	adds	r3, r7, #2
 8000658:	2203      	movs	r2, #3
 800065a:	801a      	strh	r2, [r3, #0]
  result_W=write_s_EEPROM(addrEEP, dataEEP);
 800065c:	1c7c      	adds	r4, r7, #1
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	1cbb      	adds	r3, r7, #2
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 faa4 	bl	8000bb4 <write_s_EEPROM>
 800066c:	0003      	movs	r3, r0
 800066e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x44>
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	08003b5c 	.word	0x08003b5c
 8000678:	2000007c 	.word	0x2000007c

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b093      	sub	sp, #76	; 0x4c
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	2410      	movs	r4, #16
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2338      	movs	r3, #56	; 0x38
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 fa2d 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	003b      	movs	r3, r7
 8000694:	0018      	movs	r0, r3
 8000696:	2310      	movs	r3, #16
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 fa26 	bl	8003aec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fbc7 	bl	8001e38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2202      	movs	r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b8:	0021      	movs	r1, r4
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2240      	movs	r2, #64	; 0x40
 80006c4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2202      	movs	r2, #2
 80006ca:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2202      	movs	r2, #2
 80006d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2208      	movs	r2, #8
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0292      	lsls	r2, r2, #10
 80006e4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0492      	lsls	r2, r2, #18
 80006ec:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	0592      	lsls	r2, r2, #22
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 fbe9 	bl	8001ed0 <HAL_RCC_OscConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000702:	f000 f92d 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	003b      	movs	r3, r7
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	003b      	movs	r3, r7
 800070e:	2202      	movs	r2, #2
 8000710:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	003b      	movs	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	003b      	movs	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	003b      	movs	r3, r7
 8000720:	2102      	movs	r1, #2
 8000722:	0018      	movs	r0, r3
 8000724:	f001 feee 	bl	8002504 <HAL_RCC_ClockConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800072c:	f000 f918 	bl	8000960 <Error_Handler>
  }
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b013      	add	sp, #76	; 0x4c
 8000736:	bd90      	pop	{r4, r7, pc}

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_I2C1_Init+0x80>)
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <MX_I2C1_Init+0x84>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300B29;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <MX_I2C1_Init+0x88>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x80>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000750:	2201      	movs	r2, #1
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C1_Init+0x80>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x80>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fd51 	bl	800121c <HAL_I2C_Init>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800077e:	f000 f8ef 	bl	8000960 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000784:	2100      	movs	r1, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f001 faa0 	bl	8001ccc <HAL_I2CEx_ConfigAnalogFilter>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000790:	f000 f8e6 	bl	8000960 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_I2C1_Init+0x80>)
 8000796:	2100      	movs	r1, #0
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fae3 	bl	8001d64 <HAL_I2CEx_ConfigDigitalFilter>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007a2:	f000 f8dd 	bl	8000960 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	035b      	lsls	r3, r3, #13
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fb26 	bl	8001dfc <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000028 	.word	0x20000028
 80007bc:	40005400 	.word	0x40005400
 80007c0:	00300b29 	.word	0x00300b29

080007c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	0018      	movs	r0, r3
 80007ce:	230c      	movs	r3, #12
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f003 f98a 	bl	8003aec <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_TIM7_Init+0x6c>)
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <MX_TIM7_Init+0x70>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_TIM7_Init+0x6c>)
 80007e0:	22a9      	movs	r2, #169	; 0xa9
 80007e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_TIM7_Init+0x6c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_TIM7_Init+0x6c>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_TIM7_Init+0x74>)
 80007ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_TIM7_Init+0x6c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_TIM7_Init+0x6c>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 f9e5 	bl	8002bc8 <HAL_TIM_Base_Init>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000802:	f000 f8ad 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000812:	1d3a      	adds	r2, r7, #4
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_TIM7_Init+0x6c>)
 8000816:	0011      	movs	r1, r2
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fb01 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000822:	f000 f89d 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b004      	add	sp, #16
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	2000007c 	.word	0x2000007c
 8000834:	40001400 	.word	0x40001400
 8000838:	0000ffff 	.word	0x0000ffff

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000842:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <MX_USART2_UART_Init+0x98>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000848:	22e1      	movs	r2, #225	; 0xe1
 800084a:	0252      	lsls	r2, r2, #9
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fb38 	bl	8002efc <HAL_UART_Init>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000890:	f000 f866 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 8000896:	2100      	movs	r1, #0
 8000898:	0018      	movs	r0, r3
 800089a:	f003 f847 	bl	800392c <HAL_UARTEx_SetTxFifoThreshold>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008a2:	f000 f85d 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 80008a8:	2100      	movs	r1, #0
 80008aa:	0018      	movs	r0, r3
 80008ac:	f003 f87e 	bl	80039ac <HAL_UARTEx_SetRxFifoThreshold>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 f854 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x94>)
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 fffc 	bl	80038b8 <HAL_UARTEx_DisableFifoMode>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c4:	f000 f84c 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	200000c8 	.word	0x200000c8
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b089      	sub	sp, #36	; 0x24
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	240c      	movs	r4, #12
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	0018      	movs	r0, r3
 80008e4:	2314      	movs	r3, #20
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f003 f8ff 	bl	8003aec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_GPIO_Init+0x84>)
 80008f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_GPIO_Init+0x84>)
 80008f4:	2104      	movs	r1, #4
 80008f6:	430a      	orrs	r2, r1
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_GPIO_Init+0x84>)
 80008fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fe:	2204      	movs	r2, #4
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_GPIO_Init+0x84>)
 8000908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_GPIO_Init+0x84>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_GPIO_Init+0x84>)
 8000914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800091e:	23a0      	movs	r3, #160	; 0xa0
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fc5a 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800092c:	0021      	movs	r1, r4
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2220      	movs	r2, #32
 8000932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2202      	movs	r2, #2
 8000944:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000946:	187a      	adds	r2, r7, r1
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fae2 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b009      	add	sp, #36	; 0x24
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40021000 	.word	0x40021000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_MspInit+0x4c>)
 8000974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	2101      	movs	r1, #1
 800097a:	430a      	orrs	r2, r1
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x4c>)
 800098c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <HAL_MspInit+0x4c>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0549      	lsls	r1, r1, #21
 8000994:	430a      	orrs	r2, r1
 8000996:	63da      	str	r2, [r3, #60]	; 0x3c
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <HAL_MspInit+0x4c>)
 800099a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	055b      	lsls	r3, r3, #21
 80009a0:	4013      	ands	r3, r2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009a6:	23c0      	movs	r3, #192	; 0xc0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 f9ea 	bl	8000d84 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b097      	sub	sp, #92	; 0x5c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2344      	movs	r3, #68	; 0x44
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f003 f88c 	bl	8003aec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	2410      	movs	r4, #16
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	0018      	movs	r0, r3
 80009da:	2334      	movs	r3, #52	; 0x34
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f003 f884 	bl	8003aec <memset>
  if(hi2c->Instance==I2C1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <HAL_I2C_MspInit+0xbc>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d13f      	bne.n	8000a6e <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	2220      	movs	r2, #32
 80009f2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 ff2b 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a06:	f7ff ffab 	bl	8000960 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_I2C_MspInit+0xc0>)
 8000a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_I2C_MspInit+0xc0>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_I2C_MspInit+0xc0>)
 8000a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a22:	2144      	movs	r1, #68	; 0x44
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	22c0      	movs	r2, #192	; 0xc0
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2212      	movs	r2, #18
 8000a30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2206      	movs	r2, #6
 8000a42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	187a      	adds	r2, r7, r1
 8000a46:	23a0      	movs	r3, #160	; 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fa63 	bl	8000f18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_I2C_MspInit+0xc0>)
 8000a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_I2C_MspInit+0xc0>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	0389      	lsls	r1, r1, #14
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_I2C_MspInit+0xc0>)
 8000a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	039b      	lsls	r3, r3, #14
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b017      	add	sp, #92	; 0x5c
 8000a74:	bd90      	pop	{r4, r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <HAL_TIM_Base_MspInit+0x34>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10b      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_TIM_Base_MspInit+0x38>)
 8000a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_TIM_Base_MspInit+0x38>)
 8000a98:	2120      	movs	r1, #32
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_TIM_Base_MspInit+0x38>)
 8000aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b004      	add	sp, #16
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40001400 	.word	0x40001400
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b097      	sub	sp, #92	; 0x5c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	2344      	movs	r3, #68	; 0x44
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2314      	movs	r3, #20
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f003 f80c 	bl	8003aec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	2410      	movs	r4, #16
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2334      	movs	r3, #52	; 0x34
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f003 f804 	bl	8003aec <memset>
  if(huart->Instance==USART2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d13e      	bne.n	8000b6c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2202      	movs	r2, #2
 8000af2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 feab 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b06:	f7ff ff2b 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	0289      	lsls	r1, r1, #10
 8000b14:	430a      	orrs	r2, r1
 8000b16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	029b      	lsls	r3, r3, #10
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b36:	2201      	movs	r2, #1
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b3e:	2144      	movs	r1, #68	; 0x44
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2202      	movs	r2, #2
 8000b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2201      	movs	r2, #1
 8000b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	187a      	adds	r2, r7, r1
 8000b60:	23a0      	movs	r3, #160	; 0xa0
 8000b62:	05db      	lsls	r3, r3, #23
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f9d6 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b017      	add	sp, #92	; 0x5c
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f8d4 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <write_s_EEPROM>:
 * 		  				EEPROM page boundary override
 * @result		result code front I2C device
 * */

 uint8_t write_s_EEPROM(uint16_t addr, char* data)
 {
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af04      	add	r7, sp, #16
 8000bba:	0002      	movs	r2, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	1dbb      	adds	r3, r7, #6
 8000bc0:	801a      	strh	r2, [r3, #0]
	 uint8_t result;
	 result=HAL_I2C_IsDeviceReady(&EE_PORT, EE_I2C_ADDR, ETH_AVAIL_TRIALS, ETH_AVAIL_TIMEOUT);
 8000bc2:	250f      	movs	r5, #15
 8000bc4:	197c      	adds	r4, r7, r5
 8000bc6:	23fa      	movs	r3, #250	; 0xfa
 8000bc8:	005a      	lsls	r2, r3, #1
 8000bca:	4815      	ldr	r0, [pc, #84]	; (8000c20 <write_s_EEPROM+0x6c>)
 8000bcc:	2301      	movs	r3, #1
 8000bce:	21a0      	movs	r1, #160	; 0xa0
 8000bd0:	f000 fce8 	bl	80015a4 <HAL_I2C_IsDeviceReady>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	7023      	strb	r3, [r4, #0]

	 if (result==HAL_OK)
 8000bd8:	002c      	movs	r4, r5
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d116      	bne.n	8000c10 <write_s_EEPROM+0x5c>
	 {
		 result=HAL_I2C_Mem_Write(&EE_PORT, EE_I2C_ADDR, addr, I2C_MEMADD_SIZE_16BIT, (uint8_t*) data, strlen(data)+1, I2C_COMM_TIMEOUT);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fa8d 	bl	8000104 <strlen>
 8000bea:	0003      	movs	r3, r0
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	193c      	adds	r4, r7, r4
 8000bf4:	1dba      	adds	r2, r7, #6
 8000bf6:	8812      	ldrh	r2, [r2, #0]
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <write_s_EEPROM+0x6c>)
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	9102      	str	r1, [sp, #8]
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2302      	movs	r3, #2
 8000c06:	21a0      	movs	r1, #160	; 0xa0
 8000c08:	f000 fb9e 	bl	8001348 <HAL_I2C_Mem_Write>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	7023      	strb	r3, [r4, #0]
	 }
	 return result;
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 }
 8000c16:	0018      	movs	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	20000028 	.word	0x20000028

08000c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f7ff ffbf 	bl	8000baa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c52:	f002 ff53 	bl	8003afc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c56:	f7ff fce9 	bl	800062c <main>

08000c5a <LoopForever>:

LoopForever:
  b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
  ldr   r0, =_estack
 8000c5c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c68:	08003c00 	.word	0x08003c00
  ldr r2, =_sbss
 8000c6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c70:	20000160 	.word	0x20000160

08000c74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_COMP_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x3c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Init+0x3c>)
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	0049      	lsls	r1, r1, #1
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f810 	bl	8000cb8 <HAL_InitTick>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe62 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_InitTick+0x88>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d02b      	beq.n	8000d28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_InitTick+0x8c>)
 8000cd2:	681c      	ldr	r4, [r3, #0]
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_InitTick+0x88>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	0019      	movs	r1, r3
 8000cda:	23fa      	movs	r3, #250	; 0xfa
 8000cdc:	0098      	lsls	r0, r3, #2
 8000cde:	f7ff fa19 	bl	8000114 <__udivsi3>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	0020      	movs	r0, r4
 8000ce8:	f7ff fa14 	bl	8000114 <__udivsi3>
 8000cec:	0003      	movs	r3, r0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 f905 	bl	8000efe <HAL_SYSTICK_Config>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d112      	bne.n	8000d1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d80a      	bhi.n	8000d14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	2301      	movs	r3, #1
 8000d02:	425b      	negs	r3, r3
 8000d04:	2200      	movs	r2, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 f8e4 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_InitTick+0x90>)
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e00d      	b.n	8000d30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d14:	230f      	movs	r3, #15
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e008      	b.n	8000d30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1e:	230f      	movs	r3, #15
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e003      	b.n	8000d30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	781b      	ldrb	r3, [r3, #0]
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b005      	add	sp, #20
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	001a      	movs	r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	18d2      	adds	r2, r2, r3
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_IncTick+0x20>)
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	2000015c 	.word	0x2000015c

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	2000015c 	.word	0x2000015c

08000d84 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d92:	4013      	ands	r3, r2
 8000d94:	0019      	movs	r1, r3
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	40010000 	.word	0x40010000
 8000dac:	fffff9ff 	.word	0xfffff9ff

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	0002      	movs	r2, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc4:	d828      	bhi.n	8000e18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc6:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <__NVIC_SetPriority+0xd4>)
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	33c0      	adds	r3, #192	; 0xc0
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	589b      	ldr	r3, [r3, r2]
 8000dd6:	1dfa      	adds	r2, r7, #7
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	0011      	movs	r1, r2
 8000ddc:	2203      	movs	r2, #3
 8000dde:	400a      	ands	r2, r1
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	21ff      	movs	r1, #255	; 0xff
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	401a      	ands	r2, r3
 8000dec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	22ff      	movs	r2, #255	; 0xff
 8000df4:	401a      	ands	r2, r3
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	4003      	ands	r3, r0
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	481f      	ldr	r0, [pc, #124]	; (8000e84 <__NVIC_SetPriority+0xd4>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	33c0      	adds	r3, #192	; 0xc0
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e16:	e031      	b.n	8000e7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <__NVIC_SetPriority+0xd8>)
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0019      	movs	r1, r3
 8000e20:	230f      	movs	r3, #15
 8000e22:	400b      	ands	r3, r1
 8000e24:	3b08      	subs	r3, #8
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3306      	adds	r3, #6
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	3304      	adds	r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1dfa      	adds	r2, r7, #7
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	0011      	movs	r1, r2
 8000e38:	2203      	movs	r2, #3
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	00d2      	lsls	r2, r2, #3
 8000e3e:	21ff      	movs	r1, #255	; 0xff
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	43d2      	mvns	r2, r2
 8000e46:	401a      	ands	r2, r3
 8000e48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	019b      	lsls	r3, r3, #6
 8000e4e:	22ff      	movs	r2, #255	; 0xff
 8000e50:	401a      	ands	r2, r3
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	0018      	movs	r0, r3
 8000e58:	2303      	movs	r3, #3
 8000e5a:	4003      	ands	r3, r0
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e60:	4809      	ldr	r0, [pc, #36]	; (8000e88 <__NVIC_SetPriority+0xd8>)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	001c      	movs	r4, r3
 8000e68:	230f      	movs	r3, #15
 8000e6a:	4023      	ands	r3, r4
 8000e6c:	3b08      	subs	r3, #8
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	430a      	orrs	r2, r1
 8000e72:	3306      	adds	r3, #6
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	18c3      	adds	r3, r0, r3
 8000e78:	3304      	adds	r3, #4
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b003      	add	sp, #12
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	045b      	lsls	r3, r3, #17
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d301      	bcc.n	8000ea4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e010      	b.n	8000ec6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <SysTick_Config+0x44>)
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eac:	2301      	movs	r3, #1
 8000eae:	425b      	negs	r3, r3
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff ff7c 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x44>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x44>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	210f      	movs	r1, #15
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	1c02      	adds	r2, r0, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ffbf 	bl	8000e8c <SysTick_Config>
 8000f0e:	0003      	movs	r3, r0
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	e147      	b.n	80011b8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4091      	lsls	r1, r2
 8000f32:	000a      	movs	r2, r1
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x28>
 8000f3e:	e138      	b.n	80011b2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d005      	beq.n	8000f58 <HAL_GPIO_Init+0x40>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d130      	bne.n	8000fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d017      	beq.n	8000ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d123      	bne.n	800104a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	58d3      	ldr	r3, [r2, r3]
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2207      	movs	r2, #7
 8001014:	4013      	ands	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2107      	movs	r1, #7
 800102e:	400b      	ands	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	6939      	ldr	r1, [r7, #16]
 8001048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	029b      	lsls	r3, r3, #10
 8001086:	4013      	ands	r3, r2
 8001088:	d100      	bne.n	800108c <HAL_GPIO_Init+0x174>
 800108a:	e092      	b.n	80011b2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800108c:	4a50      	ldr	r2, [pc, #320]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3318      	adds	r3, #24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	589b      	ldr	r3, [r3, r2]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2203      	movs	r2, #3
 800109e:	4013      	ands	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	220f      	movs	r2, #15
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x1ca>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_GPIO_Init+0x2bc>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x1c6>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a44      	ldr	r2, [pc, #272]	; (80011d8 <HAL_GPIO_Init+0x2c0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x1c2>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a43      	ldr	r2, [pc, #268]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x1be>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x1cc>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x1cc>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x1cc>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x1cc>
 80010e2:	2300      	movs	r3, #0
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	2103      	movs	r1, #3
 80010e8:	400a      	ands	r2, r1
 80010ea:	00d2      	lsls	r2, r2, #3
 80010ec:	4093      	lsls	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010f4:	4936      	ldr	r1, [pc, #216]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3318      	adds	r3, #24
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	035b      	lsls	r3, r3, #13
 800111a:	4013      	ands	r3, r2
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43da      	mvns	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	039b      	lsls	r3, r3, #14
 8001144:	4013      	ands	r3, r2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001156:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 8001158:	2384      	movs	r3, #132	; 0x84
 800115a:	58d3      	ldr	r3, [r2, r3]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	4013      	ands	r3, r2
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800117c:	4914      	ldr	r1, [pc, #80]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 800117e:	2284      	movs	r2, #132	; 0x84
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	58d3      	ldr	r3, [r2, r3]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	025b      	lsls	r3, r3, #9
 800119e:	4013      	ands	r3, r2
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011aa:	4909      	ldr	r1, [pc, #36]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3301      	adds	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	40da      	lsrs	r2, r3
 80011c0:	1e13      	subs	r3, r2, #0
 80011c2:	d000      	beq.n	80011c6 <HAL_GPIO_Init+0x2ae>
 80011c4:	e6b0      	b.n	8000f28 <HAL_GPIO_Init+0x10>
  }
}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b006      	add	sp, #24
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021800 	.word	0x40021800
 80011d4:	50000400 	.word	0x50000400
 80011d8:	50000800 	.word	0x50000800
 80011dc:	50000c00 	.word	0x50000c00

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	0008      	movs	r0, r1
 80011ea:	0011      	movs	r1, r2
 80011ec:	1cbb      	adds	r3, r7, #2
 80011ee:	1c02      	adds	r2, r0, #0
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	1c7b      	adds	r3, r7, #1
 80011f4:	1c0a      	adds	r2, r1, #0
 80011f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	1c7b      	adds	r3, r7, #1
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e082      	b.n	8001334 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2241      	movs	r2, #65	; 0x41
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2240      	movs	r2, #64	; 0x40
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fbb9 	bl	80009bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2241      	movs	r2, #65	; 0x41
 800124e:	2124      	movs	r1, #36	; 0x24
 8001250:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	438a      	bics	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_I2C_Init+0x120>)
 800126c:	400a      	ands	r2, r1
 800126e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4931      	ldr	r1, [pc, #196]	; (8001340 <HAL_I2C_Init+0x124>)
 800127c:	400a      	ands	r2, r1
 800127e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0209      	lsls	r1, r1, #8
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e007      	b.n	80012aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2184      	movs	r1, #132	; 0x84
 80012a4:	0209      	lsls	r1, r1, #8
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d104      	bne.n	80012bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	491f      	ldr	r1, [pc, #124]	; (8001344 <HAL_I2C_Init+0x128>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	491a      	ldr	r1, [pc, #104]	; (8001340 <HAL_I2C_Init+0x124>)
 80012d8:	400a      	ands	r2, r1
 80012da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69d9      	ldr	r1, [r3, #28]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2241      	movs	r2, #65	; 0x41
 8001320:	2120      	movs	r1, #32
 8001322:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2242      	movs	r2, #66	; 0x42
 800132e:	2100      	movs	r1, #0
 8001330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	f0ffffff 	.word	0xf0ffffff
 8001340:	ffff7fff 	.word	0xffff7fff
 8001344:	02008000 	.word	0x02008000

08001348 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af02      	add	r7, sp, #8
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	000c      	movs	r4, r1
 8001352:	0010      	movs	r0, r2
 8001354:	0019      	movs	r1, r3
 8001356:	230a      	movs	r3, #10
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	1c22      	adds	r2, r4, #0
 800135c:	801a      	strh	r2, [r3, #0]
 800135e:	2308      	movs	r3, #8
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	1c02      	adds	r2, r0, #0
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	1dbb      	adds	r3, r7, #6
 8001368:	1c0a      	adds	r2, r1, #0
 800136a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2241      	movs	r2, #65	; 0x41
 8001370:	5c9b      	ldrb	r3, [r3, r2]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b20      	cmp	r3, #32
 8001376:	d000      	beq.n	800137a <HAL_I2C_Mem_Write+0x32>
 8001378:	e10c      	b.n	8001594 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <HAL_I2C_Mem_Write+0x42>
 8001380:	232c      	movs	r3, #44	; 0x2c
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0ff      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	5c9b      	ldrb	r3, [r3, r2]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_I2C_Mem_Write+0x5c>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0f8      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2240      	movs	r2, #64	; 0x40
 80013a8:	2101      	movs	r1, #1
 80013aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ac:	f7ff fce0 	bl	8000d70 <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	0219      	lsls	r1, r3, #8
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2319      	movs	r3, #25
 80013c0:	2201      	movs	r2, #1
 80013c2:	f000 fa8f 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d001      	beq.n	80013ce <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0e3      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2241      	movs	r2, #65	; 0x41
 80013d2:	2121      	movs	r1, #33	; 0x21
 80013d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2242      	movs	r2, #66	; 0x42
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	222c      	movs	r2, #44	; 0x2c
 80013ee:	18ba      	adds	r2, r7, r2
 80013f0:	8812      	ldrh	r2, [r2, #0]
 80013f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	881c      	ldrh	r4, [r3, #0]
 80013fe:	2308      	movs	r3, #8
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	230a      	movs	r3, #10
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	8819      	ldrh	r1, [r3, #0]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	0023      	movs	r3, r4
 8001416:	f000 f9df 	bl	80017d8 <I2C_RequestMemoryWrite>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d005      	beq.n	800142a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	2100      	movs	r1, #0
 8001424:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0b5      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29b      	uxth	r3, r3
 8001430:	2bff      	cmp	r3, #255	; 0xff
 8001432:	d911      	bls.n	8001458 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	22ff      	movs	r2, #255	; 0xff
 8001438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143e:	b2da      	uxtb	r2, r3
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	045c      	lsls	r4, r3, #17
 8001444:	230a      	movs	r3, #10
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	8819      	ldrh	r1, [r3, #0]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	2300      	movs	r3, #0
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	0023      	movs	r3, r4
 8001452:	f000 fc01 	bl	8001c58 <I2C_TransferConfig>
 8001456:	e012      	b.n	800147e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001466:	b2da      	uxtb	r2, r3
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	049c      	lsls	r4, r3, #18
 800146c:	230a      	movs	r3, #10
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	8819      	ldrh	r1, [r3, #0]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	0023      	movs	r3, r4
 800147a:	f000 fbed 	bl	8001c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	0018      	movs	r0, r3
 8001486:	f000 fa6c 	bl	8001962 <I2C_WaitOnTXISFlagUntilTimeout>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e081      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d03a      	beq.n	8001542 <HAL_I2C_Mem_Write+0x1fa>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d136      	bne.n	8001542 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	0013      	movs	r3, r2
 80014de:	2200      	movs	r2, #0
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	f000 f9ff 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e053      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	d911      	bls.n	800151c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	22ff      	movs	r2, #255	; 0xff
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001502:	b2da      	uxtb	r2, r3
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	045c      	lsls	r4, r3, #17
 8001508:	230a      	movs	r3, #10
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	8819      	ldrh	r1, [r3, #0]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	0023      	movs	r3, r4
 8001516:	f000 fb9f 	bl	8001c58 <I2C_TransferConfig>
 800151a:	e012      	b.n	8001542 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152a:	b2da      	uxtb	r2, r3
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	049c      	lsls	r4, r3, #18
 8001530:	230a      	movs	r3, #10
 8001532:	18fb      	adds	r3, r7, r3
 8001534:	8819      	ldrh	r1, [r3, #0]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	2300      	movs	r3, #0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	0023      	movs	r3, r4
 800153e:	f000 fb8b 	bl	8001c58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001546:	b29b      	uxth	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d198      	bne.n	800147e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	0018      	movs	r0, r3
 8001554:	f000 fa44 	bl	80019e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e01a      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2220      	movs	r2, #32
 8001566:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	490b      	ldr	r1, [pc, #44]	; (80015a0 <HAL_I2C_Mem_Write+0x258>)
 8001574:	400a      	ands	r2, r1
 8001576:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	2120      	movs	r1, #32
 800157e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2242      	movs	r2, #66	; 0x42
 8001584:	2100      	movs	r1, #0
 8001586:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2240      	movs	r2, #64	; 0x40
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	e000      	b.n	8001596 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001594:	2302      	movs	r3, #2
  }
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b007      	add	sp, #28
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	fe00e800 	.word	0xfe00e800

080015a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	230a      	movs	r3, #10
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	1c0a      	adds	r2, r1, #0
 80015b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2241      	movs	r2, #65	; 0x41
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d000      	beq.n	80015ca <HAL_I2C_IsDeviceReady+0x26>
 80015c8:	e0fe      	b.n	80017c8 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699a      	ldr	r2, [r3, #24]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	401a      	ands	r2, r3
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	429a      	cmp	r2, r3
 80015dc:	d101      	bne.n	80015e2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80015de:	2302      	movs	r3, #2
 80015e0:	e0f3      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_I2C_IsDeviceReady+0x4c>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e0ec      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2240      	movs	r2, #64	; 0x40
 80015f4:	2101      	movs	r1, #1
 80015f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2241      	movs	r2, #65	; 0x41
 80015fc:	2124      	movs	r1, #36	; 0x24
 80015fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d107      	bne.n	800161e <HAL_I2C_IsDeviceReady+0x7a>
 800160e:	230a      	movs	r3, #10
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	059b      	lsls	r3, r3, #22
 8001616:	0d9b      	lsrs	r3, r3, #22
 8001618:	4a6e      	ldr	r2, [pc, #440]	; (80017d4 <HAL_I2C_IsDeviceReady+0x230>)
 800161a:	431a      	orrs	r2, r3
 800161c:	e007      	b.n	800162e <HAL_I2C_IsDeviceReady+0x8a>
 800161e:	230a      	movs	r3, #10
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	059b      	lsls	r3, r3, #22
 8001626:	0d9b      	lsrs	r3, r3, #22
 8001628:	22a0      	movs	r2, #160	; 0xa0
 800162a:	0192      	lsls	r2, r2, #6
 800162c:	431a      	orrs	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fb9c 	bl	8000d70 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2220      	movs	r2, #32
 8001644:	4013      	ands	r3, r2
 8001646:	3b20      	subs	r3, #32
 8001648:	425a      	negs	r2, r3
 800164a:	4153      	adcs	r3, r2
 800164c:	b2da      	uxtb	r2, r3
 800164e:	231f      	movs	r3, #31
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2210      	movs	r2, #16
 800165c:	4013      	ands	r3, r2
 800165e:	3b10      	subs	r3, #16
 8001660:	425a      	negs	r2, r3
 8001662:	4153      	adcs	r3, r2
 8001664:	b2da      	uxtb	r2, r3
 8001666:	231e      	movs	r3, #30
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800166c:	e035      	b.n	80016da <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	d01a      	beq.n	80016aa <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001674:	f7ff fb7c 	bl	8000d70 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d302      	bcc.n	800168a <HAL_I2C_IsDeviceReady+0xe6>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2241      	movs	r2, #65	; 0x41
 800168e:	2120      	movs	r1, #32
 8001690:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	2220      	movs	r2, #32
 8001698:	431a      	orrs	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2240      	movs	r2, #64	; 0x40
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e08f      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2220      	movs	r2, #32
 80016b2:	4013      	ands	r3, r2
 80016b4:	3b20      	subs	r3, #32
 80016b6:	425a      	negs	r2, r3
 80016b8:	4153      	adcs	r3, r2
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	231f      	movs	r3, #31
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2210      	movs	r2, #16
 80016ca:	4013      	ands	r3, r2
 80016cc:	3b10      	subs	r3, #16
 80016ce:	425a      	negs	r2, r3
 80016d0:	4153      	adcs	r3, r2
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	231e      	movs	r3, #30
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80016da:	231f      	movs	r3, #31
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d104      	bne.n	80016ee <HAL_I2C_IsDeviceReady+0x14a>
 80016e4:	231e      	movs	r3, #30
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0bf      	beq.n	800166e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2210      	movs	r2, #16
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d01a      	beq.n	8001732 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	0013      	movs	r3, r2
 8001706:	2200      	movs	r2, #0
 8001708:	2120      	movs	r1, #32
 800170a:	f000 f8eb 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e059      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2220      	movs	r2, #32
 800171c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2241      	movs	r2, #65	; 0x41
 8001722:	2120      	movs	r1, #32
 8001724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	2100      	movs	r1, #0
 800172c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e04b      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	0013      	movs	r3, r2
 800173c:	2200      	movs	r2, #0
 800173e:	2120      	movs	r1, #32
 8001740:	f000 f8d0 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e03e      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2210      	movs	r2, #16
 8001752:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2220      	movs	r2, #32
 800175a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	d119      	bne.n	8001798 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	01c9      	lsls	r1, r1, #7
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	0013      	movs	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	2120      	movs	r1, #32
 8001784:	f000 f8ae 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e01c      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2220      	movs	r2, #32
 8001796:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d900      	bls.n	80017a8 <HAL_I2C_IsDeviceReady+0x204>
 80017a6:	e72e      	b.n	8001606 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2241      	movs	r2, #65	; 0x41
 80017ac:	2120      	movs	r1, #32
 80017ae:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	2220      	movs	r2, #32
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2240      	movs	r2, #64	; 0x40
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
  }
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b008      	add	sp, #32
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	02002000 	.word	0x02002000

080017d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	000c      	movs	r4, r1
 80017e2:	0010      	movs	r0, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	250a      	movs	r5, #10
 80017e8:	197b      	adds	r3, r7, r5
 80017ea:	1c22      	adds	r2, r4, #0
 80017ec:	801a      	strh	r2, [r3, #0]
 80017ee:	2308      	movs	r3, #8
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	1c02      	adds	r2, r0, #0
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	1dbb      	adds	r3, r7, #6
 80017f8:	1c0a      	adds	r2, r1, #0
 80017fa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	045c      	lsls	r4, r3, #17
 8001806:	197b      	adds	r3, r7, r5
 8001808:	8819      	ldrh	r1, [r3, #0]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <I2C_RequestMemoryWrite+0xc4>)
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	0023      	movs	r3, r4
 8001812:	f000 fa21 	bl	8001c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	6a39      	ldr	r1, [r7, #32]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	0018      	movs	r0, r3
 800181e:	f000 f8a0 	bl	8001962 <I2C_WaitOnTXISFlagUntilTimeout>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e033      	b.n	8001892 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800182a:	1dbb      	adds	r3, r7, #6
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001832:	2308      	movs	r3, #8
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
 8001840:	e019      	b.n	8001876 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001842:	2308      	movs	r3, #8
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	0a1b      	lsrs	r3, r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	6a39      	ldr	r1, [r7, #32]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	0018      	movs	r0, r3
 800185c:	f000 f881 	bl	8001962 <I2C_WaitOnTXISFlagUntilTimeout>
 8001860:	1e03      	subs	r3, r0, #0
 8001862:	d001      	beq.n	8001868 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e014      	b.n	8001892 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001868:	2308      	movs	r3, #8
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001876:	6a3a      	ldr	r2, [r7, #32]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	0013      	movs	r3, r2
 8001880:	2200      	movs	r2, #0
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	f000 f82e 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001888:	1e03      	subs	r3, r0, #0
 800188a:	d001      	beq.n	8001890 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	80002000 	.word	0x80002000

080018a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d103      	bne.n	80018be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d007      	beq.n	80018dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2101      	movs	r1, #1
 80018d8:	430a      	orrs	r2, r1
 80018da:	619a      	str	r2, [r3, #24]
  }
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f4:	e021      	b.n	800193a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	d01e      	beq.n	800193a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fc:	f7ff fa38 	bl	8000d70 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d302      	bcc.n	8001912 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d113      	bne.n	800193a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	2220      	movs	r2, #32
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2241      	movs	r2, #65	; 0x41
 8001922:	2120      	movs	r1, #32
 8001924:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2242      	movs	r2, #66	; 0x42
 800192a:	2100      	movs	r1, #0
 800192c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2240      	movs	r2, #64	; 0x40
 8001932:	2100      	movs	r1, #0
 8001934:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	4013      	ands	r3, r2
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	425a      	negs	r2, r3
 800194a:	4153      	adcs	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	001a      	movs	r2, r3
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d0ce      	beq.n	80018f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	b004      	add	sp, #16
 8001960:	bd80      	pop	{r7, pc}

08001962 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800196e:	e02b      	b.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	0018      	movs	r0, r3
 8001978:	f000 f86e 	bl	8001a58 <I2C_IsErrorOccurred>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d001      	beq.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e029      	b.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	3301      	adds	r3, #1
 8001988:	d01e      	beq.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198a:	f7ff f9f1 	bl	8000d70 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	d302      	bcc.n	80019a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d113      	bne.n	80019c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	2220      	movs	r2, #32
 80019a6:	431a      	orrs	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2241      	movs	r2, #65	; 0x41
 80019b0:	2120      	movs	r1, #32
 80019b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2242      	movs	r2, #66	; 0x42
 80019b8:	2100      	movs	r1, #0
 80019ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	2100      	movs	r1, #0
 80019c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e007      	b.n	80019d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d1cc      	bne.n	8001970 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b004      	add	sp, #16
 80019de:	bd80      	pop	{r7, pc}

080019e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ec:	e028      	b.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 f82f 	bl	8001a58 <I2C_IsErrorOccurred>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d001      	beq.n	8001a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e026      	b.n	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a02:	f7ff f9b5 	bl	8000d70 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d302      	bcc.n	8001a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d113      	bne.n	8001a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2241      	movs	r2, #65	; 0x41
 8001a28:	2120      	movs	r1, #32
 8001a2a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2242      	movs	r2, #66	; 0x42
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2240      	movs	r2, #64	; 0x40
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e007      	b.n	8001a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	2220      	movs	r2, #32
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d1cf      	bne.n	80019ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b08b      	sub	sp, #44	; 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2327      	movs	r3, #39	; 0x27
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2210      	movs	r2, #16
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <I2C_IsErrorOccurred+0x2e>
 8001a84:	e082      	b.n	8001b8c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2210      	movs	r2, #16
 8001a8c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a8e:	e060      	b.n	8001b52 <I2C_IsErrorOccurred+0xfa>
 8001a90:	2427      	movs	r4, #39	; 0x27
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	193a      	adds	r2, r7, r4
 8001a96:	7812      	ldrb	r2, [r2, #0]
 8001a98:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	d058      	beq.n	8001b52 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aa0:	f7ff f966 	bl	8000d70 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d306      	bcc.n	8001abe <I2C_IsErrorOccurred+0x66>
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	193a      	adds	r2, r7, r4
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d149      	bne.n	8001b52 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	01db      	lsls	r3, r3, #7
 8001ac8:	4013      	ands	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001acc:	2013      	movs	r0, #19
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	2142      	movs	r1, #66	; 0x42
 8001ad4:	5c52      	ldrb	r2, [r2, r1]
 8001ad6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d126      	bne.n	8001b3a <I2C_IsErrorOccurred+0xe2>
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	01db      	lsls	r3, r3, #7
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d021      	beq.n	8001b3a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001af6:	183b      	adds	r3, r7, r0
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d01d      	beq.n	8001b3a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	01c9      	lsls	r1, r1, #7
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b10:	f7ff f92e 	bl	8000d70 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b18:	e00f      	b.n	8001b3a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b1a:	f7ff f929 	bl	8000d70 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b19      	cmp	r3, #25
 8001b26:	d908      	bls.n	8001b3a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b30:	2327      	movs	r3, #39	; 0x27
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]

              break;
 8001b38:	e00b      	b.n	8001b52 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2220      	movs	r2, #32
 8001b42:	4013      	ands	r3, r2
 8001b44:	2127      	movs	r1, #39	; 0x27
 8001b46:	187a      	adds	r2, r7, r1
 8001b48:	1879      	adds	r1, r7, r1
 8001b4a:	7809      	ldrb	r1, [r1, #0]
 8001b4c:	7011      	strb	r1, [r2, #0]
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d1e3      	bne.n	8001b1a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d004      	beq.n	8001b6a <I2C_IsErrorOccurred+0x112>
 8001b60:	2327      	movs	r3, #39	; 0x27
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d092      	beq.n	8001a90 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b6a:	2327      	movs	r3, #39	; 0x27
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4313      	orrs	r3, r2
 8001b82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b84:	2327      	movs	r3, #39	; 0x27
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d00c      	beq.n	8001bb8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	0052      	lsls	r2, r2, #1
 8001bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bb0:	2327      	movs	r3, #39	; 0x27
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d00c      	beq.n	8001bdc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	00d2      	lsls	r2, r2, #3
 8001bd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bd4:	2327      	movs	r3, #39	; 0x27
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d00c      	beq.n	8001c00 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	2202      	movs	r2, #2
 8001bea:	4313      	orrs	r3, r2
 8001bec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bf8:	2327      	movs	r3, #39	; 0x27
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001c00:	2327      	movs	r3, #39	; 0x27
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01d      	beq.n	8001c46 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff fe47 	bl	80018a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	490d      	ldr	r1, [pc, #52]	; (8001c54 <I2C_IsErrorOccurred+0x1fc>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2241      	movs	r2, #65	; 0x41
 8001c32:	2120      	movs	r1, #32
 8001c34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2242      	movs	r2, #66	; 0x42
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2240      	movs	r2, #64	; 0x40
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001c46:	2327      	movs	r3, #39	; 0x27
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b00b      	add	sp, #44	; 0x2c
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	fe00e800 	.word	0xfe00e800

08001c58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	0008      	movs	r0, r1
 8001c62:	0011      	movs	r1, r2
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	240a      	movs	r4, #10
 8001c68:	193b      	adds	r3, r7, r4
 8001c6a:	1c02      	adds	r2, r0, #0
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	2009      	movs	r0, #9
 8001c70:	183b      	adds	r3, r7, r0
 8001c72:	1c0a      	adds	r2, r1, #0
 8001c74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c76:	193b      	adds	r3, r7, r4
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	059b      	lsls	r3, r3, #22
 8001c7c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c7e:	183b      	adds	r3, r7, r0
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	0419      	lsls	r1, r3, #16
 8001c84:	23ff      	movs	r3, #255	; 0xff
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c8a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	4313      	orrs	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca2:	0d51      	lsrs	r1, r2, #21
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	400a      	ands	r2, r1
 8001caa:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <I2C_TransferConfig+0x70>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	43d2      	mvns	r2, r2
 8001cb0:	401a      	ands	r2, r3
 8001cb2:	0011      	movs	r1, r2
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b007      	add	sp, #28
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	03ff63ff 	.word	0x03ff63ff

08001ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2241      	movs	r2, #65	; 0x41
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d138      	bne.n	8001d54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2240      	movs	r2, #64	; 0x40
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e032      	b.n	8001d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2241      	movs	r2, #65	; 0x41
 8001cfc:	2124      	movs	r1, #36	; 0x24
 8001cfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4911      	ldr	r1, [pc, #68]	; (8001d60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2241      	movs	r2, #65	; 0x41
 8001d44:	2120      	movs	r1, #32
 8001d46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e000      	b.n	8001d56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d54:	2302      	movs	r3, #2
  }
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b002      	add	sp, #8
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	ffffefff 	.word	0xffffefff

08001d64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2241      	movs	r2, #65	; 0x41
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d139      	bne.n	8001dee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	5c9b      	ldrb	r3, [r3, r2]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e033      	b.n	8001df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2241      	movs	r2, #65	; 0x41
 8001d94:	2124      	movs	r1, #36	; 0x24
 8001d96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	438a      	bics	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2241      	movs	r2, #65	; 0x41
 8001dde:	2120      	movs	r1, #32
 8001de0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	2100      	movs	r1, #0
 8001de8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
  }
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	fffff0ff 	.word	0xfffff0ff

08001dfc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8001e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2201      	movs	r2, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000

08001e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d11f      	bne.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	0013      	movs	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	189b      	adds	r3, r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4912      	ldr	r1, [pc, #72]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7fe f952 	bl	8000114 <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e76:	e008      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e001      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e009      	b.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	401a      	ands	r2, r3
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	fffff9ff 	.word	0xfffff9ff
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	000f4240 	.word	0x000f4240

08001eb8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	23e0      	movs	r3, #224	; 0xe0
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	4013      	ands	r3, r2
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e2fe      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x1e>
 8001eec:	e07c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4bc3      	ldr	r3, [pc, #780]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2238      	movs	r2, #56	; 0x38
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef8:	4bc0      	ldr	r3, [pc, #768]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2203      	movs	r2, #3
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3e>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d002      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4bb9      	ldr	r3, [pc, #740]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d062      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x116>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d15e      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e2d9      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	025b      	lsls	r3, r3, #9
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x78>
 8001f38:	4bb0      	ldr	r3, [pc, #704]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4baf      	ldr	r3, [pc, #700]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0249      	lsls	r1, r1, #9
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e020      	b.n	8001f8a <HAL_RCC_OscConfig+0xba>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	23a0      	movs	r3, #160	; 0xa0
 8001f4e:	02db      	lsls	r3, r3, #11
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d10e      	bne.n	8001f72 <HAL_RCC_OscConfig+0xa2>
 8001f54:	4ba9      	ldr	r3, [pc, #676]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4ba8      	ldr	r3, [pc, #672]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	02c9      	lsls	r1, r1, #11
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	4ba6      	ldr	r3, [pc, #664]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4ba5      	ldr	r3, [pc, #660]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0249      	lsls	r1, r1, #9
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e00b      	b.n	8001f8a <HAL_RCC_OscConfig+0xba>
 8001f72:	4ba2      	ldr	r3, [pc, #648]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4ba1      	ldr	r3, [pc, #644]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f78:	49a1      	ldr	r1, [pc, #644]	; (8002200 <HAL_RCC_OscConfig+0x330>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	4b9f      	ldr	r3, [pc, #636]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b9e      	ldr	r3, [pc, #632]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001f84:	499f      	ldr	r1, [pc, #636]	; (8002204 <HAL_RCC_OscConfig+0x334>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d014      	beq.n	8001fbc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7fe feed 	bl	8000d70 <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe fee8 	bl	8000d70 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e298      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fae:	4b93      	ldr	r3, [pc, #588]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	029b      	lsls	r3, r3, #10
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xcc>
 8001fba:	e015      	b.n	8001fe8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fed8 	bl	8000d70 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fed3 	bl	8000d70 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e283      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fd8:	4b88      	ldr	r3, [pc, #544]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0xf6>
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2202      	movs	r2, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x124>
 8001ff2:	e099      	b.n	8002128 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff4:	4b81      	ldr	r3, [pc, #516]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2238      	movs	r2, #56	; 0x38
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2203      	movs	r2, #3
 8002004:	4013      	ands	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b10      	cmp	r3, #16
 800200c:	d102      	bne.n	8002014 <HAL_RCC_OscConfig+0x144>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d002      	beq.n	800201a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d135      	bne.n	8002086 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201a:	4b78      	ldr	r3, [pc, #480]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4013      	ands	r3, r2
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x162>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e256      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b72      	ldr	r3, [pc, #456]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a74      	ldr	r2, [pc, #464]	; (8002208 <HAL_RCC_OscConfig+0x338>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	021a      	lsls	r2, r3, #8
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d112      	bne.n	8002074 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800204e:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a6e      	ldr	r2, [pc, #440]	; (800220c <HAL_RCC_OscConfig+0x33c>)
 8002054:	4013      	ands	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002062:	4b66      	ldr	r3, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	2207      	movs	r2, #7
 800206a:	4013      	ands	r3, r2
 800206c:	4a68      	ldr	r2, [pc, #416]	; (8002210 <HAL_RCC_OscConfig+0x340>)
 800206e:	40da      	lsrs	r2, r3
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <HAL_RCC_OscConfig+0x344>)
 8002072:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_OscConfig+0x348>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0018      	movs	r0, r3
 800207a:	f7fe fe1d 	bl	8000cb8 <HAL_InitTick>
 800207e:	1e03      	subs	r3, r0, #0
 8002080:	d051      	beq.n	8002126 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e22c      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d030      	beq.n	80020f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x33c>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020a2:	4b56      	ldr	r3, [pc, #344]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b55      	ldr	r3, [pc, #340]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0049      	lsls	r1, r1, #1
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fe5e 	bl	8000d70 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7fe fe59 	bl	8000d70 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e209      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020cc:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b48      	ldr	r3, [pc, #288]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <HAL_RCC_OscConfig+0x338>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	021a      	lsls	r2, r3, #8
 80020e8:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	e01b      	b.n	8002128 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80020f0:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80020f6:	4949      	ldr	r1, [pc, #292]	; (800221c <HAL_RCC_OscConfig+0x34c>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fe38 	bl	8000d70 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe fe33 	bl	8000d70 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1e3      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002118:	4b38      	ldr	r3, [pc, #224]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4013      	ands	r3, r2
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x236>
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002126:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2208      	movs	r2, #8
 800212e:	4013      	ands	r3, r2
 8002130:	d047      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2238      	movs	r2, #56	; 0x38
 8002138:	4013      	ands	r3, r2
 800213a:	2b18      	cmp	r3, #24
 800213c:	d10a      	bne.n	8002154 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d03c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2f2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d138      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e1c5      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d019      	beq.n	8002190 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 800215e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002162:	2101      	movs	r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe fe02 	bl	8000d70 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002172:	f7fe fdfd 	bl	8000d70 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1ad      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002188:	2202      	movs	r2, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d0f1      	beq.n	8002172 <HAL_RCC_OscConfig+0x2a2>
 800218e:	e018      	b.n	80021c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 8002196:	2101      	movs	r1, #1
 8002198:	438a      	bics	r2, r1
 800219a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fde8 	bl	8000d70 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe fde3 	bl	8000d70 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e193      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80021ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021bc:	2202      	movs	r2, #2
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f1      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2204      	movs	r2, #4
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x2fe>
 80021cc:	e0c6      	b.n	800235c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	231f      	movs	r3, #31
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2238      	movs	r2, #56	; 0x38
 80021dc:	4013      	ands	r3, r2
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d11e      	bne.n	8002220 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_OscConfig+0x32c>)
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2202      	movs	r2, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	d100      	bne.n	80021ee <HAL_RCC_OscConfig+0x31e>
 80021ec:	e0b6      	b.n	800235c <HAL_RCC_OscConfig+0x48c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d000      	beq.n	80021f8 <HAL_RCC_OscConfig+0x328>
 80021f6:	e0b1      	b.n	800235c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e171      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
 80021fc:	40021000 	.word	0x40021000
 8002200:	fffeffff 	.word	0xfffeffff
 8002204:	fffbffff 	.word	0xfffbffff
 8002208:	ffff80ff 	.word	0xffff80ff
 800220c:	ffffc7ff 	.word	0xffffc7ff
 8002210:	00f42400 	.word	0x00f42400
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004
 800221c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002220:	4bb1      	ldr	r3, [pc, #708]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	055b      	lsls	r3, r3, #21
 8002228:	4013      	ands	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_RCC_OscConfig+0x360>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x362>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d011      	beq.n	800225a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4bac      	ldr	r3, [pc, #688]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800223a:	4bab      	ldr	r3, [pc, #684]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	0549      	lsls	r1, r1, #21
 8002240:	430a      	orrs	r2, r1
 8002242:	63da      	str	r2, [r3, #60]	; 0x3c
 8002244:	4ba8      	ldr	r3, [pc, #672]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	055b      	lsls	r3, r3, #21
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002252:	231f      	movs	r3, #31
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225a:	4ba4      	ldr	r3, [pc, #656]	; (80024ec <HAL_RCC_OscConfig+0x61c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d11a      	bne.n	800229c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002266:	4ba1      	ldr	r3, [pc, #644]	; (80024ec <HAL_RCC_OscConfig+0x61c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4ba0      	ldr	r3, [pc, #640]	; (80024ec <HAL_RCC_OscConfig+0x61c>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0049      	lsls	r1, r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002274:	f7fe fd7c 	bl	8000d70 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fd77 	bl	8000d70 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e127      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002290:	4b96      	ldr	r3, [pc, #600]	; (80024ec <HAL_RCC_OscConfig+0x61c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3e2>
 80022a4:	4b90      	ldr	r3, [pc, #576]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022a8:	4b8f      	ldr	r3, [pc, #572]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80022b0:	e01c      	b.n	80022ec <HAL_RCC_OscConfig+0x41c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x404>
 80022ba:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022be:	4b8a      	ldr	r3, [pc, #552]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022c0:	2104      	movs	r1, #4
 80022c2:	430a      	orrs	r2, r1
 80022c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80022c6:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ca:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022cc:	2101      	movs	r1, #1
 80022ce:	430a      	orrs	r2, r1
 80022d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0x41c>
 80022d4:	4b84      	ldr	r3, [pc, #528]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022d8:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022da:	2101      	movs	r1, #1
 80022dc:	438a      	bics	r2, r1
 80022de:	65da      	str	r2, [r3, #92]	; 0x5c
 80022e0:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e4:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80022e6:	2104      	movs	r1, #4
 80022e8:	438a      	bics	r2, r1
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d014      	beq.n	800231e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fd3c 	bl	8000d70 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fc:	e009      	b.n	8002312 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe fd37 	bl	8000d70 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_RCC_OscConfig+0x620>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0e6      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002312:	4b75      	ldr	r3, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	2202      	movs	r2, #2
 8002318:	4013      	ands	r3, r2
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x42e>
 800231c:	e013      	b.n	8002346 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe fd27 	bl	8000d70 <HAL_GetTick>
 8002322:	0003      	movs	r3, r0
 8002324:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002326:	e009      	b.n	800233c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe fd22 	bl	8000d70 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	4a6f      	ldr	r2, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x620>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0d1      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233c:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002346:	231f      	movs	r3, #31
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002350:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002354:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002356:	4967      	ldr	r1, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x624>)
 8002358:	400a      	ands	r2, r1
 800235a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d100      	bne.n	8002366 <HAL_RCC_OscConfig+0x496>
 8002364:	e0bb      	b.n	80024de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002366:	4b60      	ldr	r3, [pc, #384]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2238      	movs	r2, #56	; 0x38
 800236c:	4013      	ands	r3, r2
 800236e:	2b10      	cmp	r3, #16
 8002370:	d100      	bne.n	8002374 <HAL_RCC_OscConfig+0x4a4>
 8002372:	e07b      	b.n	800246c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d156      	bne.n	800242a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237c:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002382:	495d      	ldr	r1, [pc, #372]	; (80024f8 <HAL_RCC_OscConfig+0x628>)
 8002384:	400a      	ands	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fcf2 	bl	8000d70 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fced 	bl	8000d70 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e09d      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	049b      	lsls	r3, r3, #18
 80023ac:	4013      	ands	r3, r2
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a51      	ldr	r2, [pc, #324]	; (80024fc <HAL_RCC_OscConfig+0x62c>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	431a      	orrs	r2, r3
 80023de:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	0449      	lsls	r1, r1, #17
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0549      	lsls	r1, r1, #21
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fcb6 	bl	8000d70 <HAL_GetTick>
 8002404:	0003      	movs	r3, r0
 8002406:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe fcb1 	bl	8000d70 <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e061      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241c:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	049b      	lsls	r3, r3, #18
 8002424:	4013      	ands	r3, r2
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x53a>
 8002428:	e059      	b.n	80024de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002430:	4931      	ldr	r1, [pc, #196]	; (80024f8 <HAL_RCC_OscConfig+0x628>)
 8002432:	400a      	ands	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe fc9b 	bl	8000d70 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fc96 	bl	8000d70 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e046      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	049b      	lsls	r3, r3, #18
 800245a:	4013      	ands	r3, r2
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 8002464:	4926      	ldr	r1, [pc, #152]	; (8002500 <HAL_RCC_OscConfig+0x630>)
 8002466:	400a      	ands	r2, r1
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	e038      	b.n	80024de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e033      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x618>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2203      	movs	r2, #3
 8002482:	401a      	ands	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	429a      	cmp	r2, r3
 800248a:	d126      	bne.n	80024da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2270      	movs	r2, #112	; 0x70
 8002490:	401a      	ands	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d11f      	bne.n	80024da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	23fe      	movs	r3, #254	; 0xfe
 800249e:	01db      	lsls	r3, r3, #7
 80024a0:	401a      	ands	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d116      	bne.n	80024da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	23f8      	movs	r3, #248	; 0xf8
 80024b0:	039b      	lsls	r3, r3, #14
 80024b2:	401a      	ands	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d10e      	bne.n	80024da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	23e0      	movs	r3, #224	; 0xe0
 80024c0:	051b      	lsls	r3, r3, #20
 80024c2:	401a      	ands	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	0f5b      	lsrs	r3, r3, #29
 80024d0:	075a      	lsls	r2, r3, #29
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b008      	add	sp, #32
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
 80024f0:	00001388 	.word	0x00001388
 80024f4:	efffffff 	.word	0xefffffff
 80024f8:	feffffff 	.word	0xfeffffff
 80024fc:	11c1808c 	.word	0x11c1808c
 8002500:	eefefffc 	.word	0xeefefffc

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0e9      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002518:	4b76      	ldr	r3, [pc, #472]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2207      	movs	r2, #7
 800251e:	4013      	ands	r3, r2
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d91e      	bls.n	8002564 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2207      	movs	r2, #7
 800252c:	4393      	bics	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002538:	f7fe fc1a 	bl	8000d70 <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002540:	e009      	b.n	8002556 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002542:	f7fe fc15 	bl	8000d70 <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	4a6a      	ldr	r2, [pc, #424]	; (80026f8 <HAL_RCC_ClockConfig+0x1f4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0ca      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002556:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2207      	movs	r2, #7
 800255c:	4013      	ands	r3, r2
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2202      	movs	r2, #2
 800256a:	4013      	ands	r3, r2
 800256c:	d015      	beq.n	800259a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2204      	movs	r2, #4
 8002574:	4013      	ands	r3, r2
 8002576:	d006      	beq.n	8002586 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002578:	4b60      	ldr	r3, [pc, #384]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4b5f      	ldr	r3, [pc, #380]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 800257e:	21e0      	movs	r1, #224	; 0xe0
 8002580:	01c9      	lsls	r1, r1, #7
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	4a5d      	ldr	r2, [pc, #372]	; (8002700 <HAL_RCC_ClockConfig+0x1fc>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2201      	movs	r2, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	d057      	beq.n	8002654 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	4013      	ands	r3, r2
 80025b6:	d12b      	bne.n	8002610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e097      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c4:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	049b      	lsls	r3, r3, #18
 80025cc:	4013      	ands	r3, r2
 80025ce:	d11f      	bne.n	8002610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e08b      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025dc:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4013      	ands	r3, r2
 80025e6:	d113      	bne.n	8002610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e07f      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	2202      	movs	r2, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e074      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e06d      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2207      	movs	r2, #7
 8002616:	4393      	bics	r3, r2
 8002618:	0019      	movs	r1, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002624:	f7fe fba4 	bl	8000d70 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262c:	e009      	b.n	8002642 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262e:	f7fe fb9f 	bl	8000d70 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <HAL_RCC_ClockConfig+0x1f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e054      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	; 0x38
 8002648:	401a      	ands	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	429a      	cmp	r2, r3
 8002652:	d1ec      	bne.n	800262e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2207      	movs	r2, #7
 800265a:	4013      	ands	r3, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d21e      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2207      	movs	r2, #7
 8002668:	4393      	bics	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002674:	f7fe fb7c 	bl	8000d70 <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800267c:	e009      	b.n	8002692 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fb77 	bl	8000d70 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <HAL_RCC_ClockConfig+0x1f4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e02c      	b.n	80026ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2207      	movs	r2, #7
 8002698:	4013      	ands	r3, r2
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d1ee      	bne.n	800267e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2204      	movs	r2, #4
 80026a6:	4013      	ands	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <HAL_RCC_ClockConfig+0x200>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80026ba:	430a      	orrs	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026be:	f000 f829 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026c2:	0001      	movs	r1, r0
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_RCC_ClockConfig+0x1f8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	220f      	movs	r2, #15
 80026cc:	401a      	ands	r2, r3
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x204>)
 80026d0:	0092      	lsls	r2, r2, #2
 80026d2:	58d3      	ldr	r3, [r2, r3]
 80026d4:	221f      	movs	r2, #31
 80026d6:	4013      	ands	r3, r2
 80026d8:	000a      	movs	r2, r1
 80026da:	40da      	lsrs	r2, r3
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x208>)
 80026de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_ClockConfig+0x20c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7fe fae7 	bl	8000cb8 <HAL_InitTick>
 80026ea:	0003      	movs	r3, r0
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b004      	add	sp, #16
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40022000 	.word	0x40022000
 80026f8:	00001388 	.word	0x00001388
 80026fc:	40021000 	.word	0x40021000
 8002700:	fffff0ff 	.word	0xfffff0ff
 8002704:	ffff8fff 	.word	0xffff8fff
 8002708:	08003b68 	.word	0x08003b68
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	4b3c      	ldr	r3, [pc, #240]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	; 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	d10f      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0adb      	lsrs	r3, r3, #11
 800272a:	2207      	movs	r2, #7
 800272c:	4013      	ands	r3, r2
 800272e:	2201      	movs	r2, #1
 8002730:	409a      	lsls	r2, r3
 8002732:	0013      	movs	r3, r2
 8002734:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	4835      	ldr	r0, [pc, #212]	; (8002810 <HAL_RCC_GetSysClockFreq+0xfc>)
 800273a:	f7fd fceb 	bl	8000114 <__udivsi3>
 800273e:	0003      	movs	r3, r0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e05d      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2238      	movs	r2, #56	; 0x38
 800274a:	4013      	ands	r3, r2
 800274c:	2b08      	cmp	r3, #8
 800274e:	d102      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_RCC_GetSysClockFreq+0x100>)
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	e054      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2238      	movs	r2, #56	; 0x38
 800275c:	4013      	ands	r3, r2
 800275e:	2b10      	cmp	r3, #16
 8002760:	d138      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002762:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2203      	movs	r2, #3
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	2207      	movs	r2, #7
 8002774:	4013      	ands	r3, r2
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d10d      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	4824      	ldr	r0, [pc, #144]	; (8002814 <HAL_RCC_GetSysClockFreq+0x100>)
 8002784:	f7fd fcc6 	bl	8000114 <__udivsi3>
 8002788:	0003      	movs	r3, r0
 800278a:	0019      	movs	r1, r3
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	227f      	movs	r2, #127	; 0x7f
 8002794:	4013      	ands	r3, r2
 8002796:	434b      	muls	r3, r1
 8002798:	617b      	str	r3, [r7, #20]
        break;
 800279a:	e00d      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	481c      	ldr	r0, [pc, #112]	; (8002810 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027a0:	f7fd fcb8 	bl	8000114 <__udivsi3>
 80027a4:	0003      	movs	r3, r0
 80027a6:	0019      	movs	r1, r3
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	227f      	movs	r2, #127	; 0x7f
 80027b0:	4013      	ands	r3, r2
 80027b2:	434b      	muls	r3, r1
 80027b4:	617b      	str	r3, [r7, #20]
        break;
 80027b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0f5b      	lsrs	r3, r3, #29
 80027be:	2207      	movs	r2, #7
 80027c0:	4013      	ands	r3, r2
 80027c2:	3301      	adds	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f7fd fca3 	bl	8000114 <__udivsi3>
 80027ce:	0003      	movs	r3, r0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e015      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2238      	movs	r2, #56	; 0x38
 80027da:	4013      	ands	r3, r2
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d103      	bne.n	80027e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2238      	movs	r2, #56	; 0x38
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b18      	cmp	r3, #24
 80027f2:	d103      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80027f4:	23fa      	movs	r3, #250	; 0xfa
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e001      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002800:	693b      	ldr	r3, [r7, #16]
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b006      	add	sp, #24
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40021000 	.word	0x40021000
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200

08002818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <HAL_RCC_GetHCLKFreq+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	20000000 	.word	0x20000000

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002830:	f7ff fff2 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002834:	0004      	movs	r4, r0
 8002836:	f7ff fb3f 	bl	8001eb8 <LL_RCC_GetAPB1Prescaler>
 800283a:	0003      	movs	r3, r0
 800283c:	0b1a      	lsrs	r2, r3, #12
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	58d3      	ldr	r3, [r2, r3]
 8002844:	221f      	movs	r2, #31
 8002846:	4013      	ands	r3, r2
 8002848:	40dc      	lsrs	r4, r3
 800284a:	0023      	movs	r3, r4
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	08003ba8 	.word	0x08003ba8

08002858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002860:	2313      	movs	r3, #19
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002868:	2312      	movs	r3, #18
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	4013      	ands	r3, r2
 800287a:	d100      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800287c:	e0a3      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2011      	movs	r0, #17
 8002880:	183b      	adds	r3, r7, r0
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4bc3      	ldr	r3, [pc, #780]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	055b      	lsls	r3, r3, #21
 800288e:	4013      	ands	r3, r2
 8002890:	d110      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4bc0      	ldr	r3, [pc, #768]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002896:	4bbf      	ldr	r3, [pc, #764]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0549      	lsls	r1, r1, #21
 800289c:	430a      	orrs	r2, r1
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a0:	4bbc      	ldr	r3, [pc, #752]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	055b      	lsls	r3, r3, #21
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b4:	4bb8      	ldr	r3, [pc, #736]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4bb7      	ldr	r3, [pc, #732]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	0049      	lsls	r1, r1, #1
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fa55 	bl	8000d70 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ca:	e00b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fa50 	bl	8000d70 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d904      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80028da:	2313      	movs	r3, #19
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2203      	movs	r2, #3
 80028e0:	701a      	strb	r2, [r3, #0]
        break;
 80028e2:	e005      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e4:	4bac      	ldr	r3, [pc, #688]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d0ed      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80028f0:	2313      	movs	r3, #19
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d154      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028fa:	4ba6      	ldr	r3, [pc, #664]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028fe:	23c0      	movs	r3, #192	; 0xc0
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4013      	ands	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d019      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	429a      	cmp	r2, r3
 8002914:	d014      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002916:	4b9f      	ldr	r3, [pc, #636]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	4aa0      	ldr	r2, [pc, #640]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800291c:	4013      	ands	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002920:	4b9c      	ldr	r3, [pc, #624]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002922:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002924:	4b9b      	ldr	r3, [pc, #620]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	0249      	lsls	r1, r1, #9
 800292a:	430a      	orrs	r2, r1
 800292c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800292e:	4b99      	ldr	r3, [pc, #612]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002930:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002932:	4b98      	ldr	r3, [pc, #608]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002934:	499a      	ldr	r1, [pc, #616]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002936:	400a      	ands	r2, r1
 8002938:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800293a:	4b96      	ldr	r3, [pc, #600]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d016      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fa12 	bl	8000d70 <HAL_GetTick>
 800294c:	0003      	movs	r3, r0
 800294e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002950:	e00c      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fa0d 	bl	8000d70 <HAL_GetTick>
 8002956:	0002      	movs	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	4a91      	ldr	r2, [pc, #580]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d904      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002962:	2313      	movs	r3, #19
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2203      	movs	r2, #3
 8002968:	701a      	strb	r2, [r3, #0]
            break;
 800296a:	e004      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296c:	4b89      	ldr	r3, [pc, #548]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2202      	movs	r2, #2
 8002972:	4013      	ands	r3, r2
 8002974:	d0ed      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002976:	2313      	movs	r3, #19
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002980:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	4a85      	ldr	r2, [pc, #532]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298e:	4b81      	ldr	r3, [pc, #516]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002990:	430a      	orrs	r2, r1
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c
 8002994:	e00c      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002996:	2312      	movs	r3, #18
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	2213      	movs	r2, #19
 800299c:	18ba      	adds	r2, r7, r2
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e005      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	2312      	movs	r3, #18
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	2213      	movs	r2, #19
 80029aa:	18ba      	adds	r2, r7, r2
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029b0:	2311      	movs	r3, #17
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029be:	4b75      	ldr	r3, [pc, #468]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029c0:	4979      	ldr	r1, [pc, #484]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d0:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	2203      	movs	r2, #3
 80029d6:	4393      	bics	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ee:	4b69      	ldr	r3, [pc, #420]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	220c      	movs	r2, #12
 80029f4:	4393      	bics	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b65      	ldr	r3, [pc, #404]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2210      	movs	r2, #16
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a0c:	4b61      	ldr	r3, [pc, #388]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	4a66      	ldr	r2, [pc, #408]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d009      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2c:	4b59      	ldr	r3, [pc, #356]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	4a5f      	ldr	r2, [pc, #380]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a4c:	4b51      	ldr	r3, [pc, #324]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	4013      	ands	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	01db      	lsls	r3, r3, #7
 8002a86:	4013      	ands	r3, r2
 8002a88:	d015      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a8a:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	0899      	lsrs	r1, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	05db      	lsls	r3, r3, #23
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	0249      	lsls	r1, r1, #9
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	031b      	lsls	r3, r3, #12
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac2:	4b34      	ldr	r3, [pc, #208]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	2240      	movs	r2, #64	; 0x40
 8002ac8:	4393      	bics	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	039b      	lsls	r3, r3, #14
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	03db      	lsls	r3, r3, #15
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d106      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	0449      	lsls	r1, r1, #17
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	03db      	lsls	r3, r3, #15
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d016      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	045b      	lsls	r3, r3, #17
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	0449      	lsls	r1, r1, #17
 8002b46:	430a      	orrs	r2, r1
 8002b48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	d016      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d106      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0249      	lsls	r1, r1, #9
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002b84:	2312      	movs	r3, #18
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	781b      	ldrb	r3, [r3, #0]
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b006      	add	sp, #24
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	fffffcff 	.word	0xfffffcff
 8002ba0:	fffeffff 	.word	0xfffeffff
 8002ba4:	00001388 	.word	0x00001388
 8002ba8:	efffffff 	.word	0xefffffff
 8002bac:	fffff3ff 	.word	0xfffff3ff
 8002bb0:	fff3ffff 	.word	0xfff3ffff
 8002bb4:	ffcfffff 	.word	0xffcfffff
 8002bb8:	ffffcfff 	.word	0xffffcfff
 8002bbc:	ffbfffff 	.word	0xffbfffff
 8002bc0:	feffffff 	.word	0xfeffffff
 8002bc4:	ffff3fff 	.word	0xffff3fff

08002bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e04a      	b.n	8002c70 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	223d      	movs	r2, #61	; 0x3d
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	223c      	movs	r2, #60	; 0x3c
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fd ff45 	bl	8000a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	223d      	movs	r2, #61	; 0x3d
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3304      	adds	r3, #4
 8002c06:	0019      	movs	r1, r3
 8002c08:	0010      	movs	r0, r2
 8002c0a:	f000 f889 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2248      	movs	r2, #72	; 0x48
 8002c12:	2101      	movs	r1, #1
 8002c14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223e      	movs	r2, #62	; 0x3e
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	5499      	strb	r1, [r3, r2]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	223f      	movs	r2, #63	; 0x3f
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2240      	movs	r2, #64	; 0x40
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2241      	movs	r2, #65	; 0x41
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2242      	movs	r2, #66	; 0x42
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2243      	movs	r2, #67	; 0x43
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2244      	movs	r2, #68	; 0x44
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2245      	movs	r2, #69	; 0x45
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2246      	movs	r2, #70	; 0x46
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2247      	movs	r2, #71	; 0x47
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	223d      	movs	r2, #61	; 0x3d
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	223d      	movs	r2, #61	; 0x3d
 8002c84:	5c9b      	ldrb	r3, [r3, r2]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e03a      	b.n	8002d06 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	223d      	movs	r2, #61	; 0x3d
 8002c94:	2102      	movs	r1, #2
 8002c96:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_TIM_Base_Start+0x98>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00f      	beq.n	8002cc2 <HAL_TIM_Base_Start+0x4a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	05db      	lsls	r3, r3, #23
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d009      	beq.n	8002cc2 <HAL_TIM_Base_Start+0x4a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <HAL_TIM_Base_Start+0x9c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_TIM_Base_Start+0x4a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_TIM_Base_Start+0xa0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d116      	bne.n	8002cf0 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIM_Base_Start+0xa4>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b06      	cmp	r3, #6
 8002cd2:	d016      	beq.n	8002d02 <HAL_TIM_Base_Start+0x8a>
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d011      	beq.n	8002d02 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cee:	e008      	b.n	8002d02 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e000      	b.n	8002d04 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b004      	add	sp, #16
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40014000 	.word	0x40014000
 8002d1c:	00010007 	.word	0x00010007

08002d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <TIM_Base_SetConfig+0xe4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d008      	beq.n	8002d4a <TIM_Base_SetConfig+0x2a>
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	05db      	lsls	r3, r3, #23
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d003      	beq.n	8002d4a <TIM_Base_SetConfig+0x2a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a30      	ldr	r2, [pc, #192]	; (8002e08 <TIM_Base_SetConfig+0xe8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d108      	bne.n	8002d5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2270      	movs	r2, #112	; 0x70
 8002d4e:	4393      	bics	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <TIM_Base_SetConfig+0xe4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d018      	beq.n	8002d96 <TIM_Base_SetConfig+0x76>
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d013      	beq.n	8002d96 <TIM_Base_SetConfig+0x76>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <TIM_Base_SetConfig+0xe8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00f      	beq.n	8002d96 <TIM_Base_SetConfig+0x76>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a24      	ldr	r2, [pc, #144]	; (8002e0c <TIM_Base_SetConfig+0xec>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00b      	beq.n	8002d96 <TIM_Base_SetConfig+0x76>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <TIM_Base_SetConfig+0xf0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d007      	beq.n	8002d96 <TIM_Base_SetConfig+0x76>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <TIM_Base_SetConfig+0xf4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d003      	beq.n	8002d96 <TIM_Base_SetConfig+0x76>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <TIM_Base_SetConfig+0xf8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d108      	bne.n	8002da8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <TIM_Base_SetConfig+0xfc>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	4393      	bics	r3, r2
 8002dae:	001a      	movs	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <TIM_Base_SetConfig+0xe4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <TIM_Base_SetConfig+0xce>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <TIM_Base_SetConfig+0xf0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <TIM_Base_SetConfig+0xce>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <TIM_Base_SetConfig+0xf4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_Base_SetConfig+0xce>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a0b      	ldr	r2, [pc, #44]	; (8002e18 <TIM_Base_SetConfig+0xf8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d103      	bne.n	8002df6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	615a      	str	r2, [r3, #20]
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40002000 	.word	0x40002000
 8002e10:	40014000 	.word	0x40014000
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800
 8002e1c:	fffffcff 	.word	0xfffffcff

08002e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	223c      	movs	r2, #60	; 0x3c
 8002e2e:	5c9b      	ldrb	r3, [r3, r2]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e055      	b.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	223c      	movs	r2, #60	; 0x3c
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	223d      	movs	r2, #61	; 0x3d
 8002e44:	2102      	movs	r1, #2
 8002e46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2270      	movs	r2, #112	; 0x70
 8002e78:	4393      	bics	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a16      	ldr	r2, [pc, #88]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00f      	beq.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	05db      	lsls	r3, r3, #23
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d009      	beq.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	4393      	bics	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	223d      	movs	r2, #61	; 0x3d
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	223c      	movs	r2, #60	; 0x3c
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	ff0fffff 	.word	0xff0fffff
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40014000 	.word	0x40014000

08002efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e046      	b.n	8002f9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2288      	movs	r2, #136	; 0x88
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2284      	movs	r2, #132	; 0x84
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd fdca 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2288      	movs	r2, #136	; 0x88
 8002f2c:	2124      	movs	r1, #36	; 0x24
 8002f2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f830 	bl	8002fa8 <UART_SetConfig>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e024      	b.n	8002f9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fae1 	bl	8003524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <HAL_UART_Init+0xa8>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	212a      	movs	r1, #42	; 0x2a
 8002f7e:	438a      	bics	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fb79 	bl	800368c <UART_CheckIdleState>
 8002f9a:	0003      	movs	r3, r0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	ffffb7ff 	.word	0xffffb7ff

08002fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b090      	sub	sp, #64	; 0x40
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb0:	231a      	movs	r3, #26
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	189b      	adds	r3, r3, r2
 8002fb6:	19db      	adds	r3, r3, r7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4aaf      	ldr	r2, [pc, #700]	; (8003298 <UART_SetConfig+0x2f0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4aaa      	ldr	r2, [pc, #680]	; (800329c <UART_SetConfig+0x2f4>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	68d9      	ldr	r1, [r3, #12]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	0003      	movs	r3, r0
 8003000:	430b      	orrs	r3, r1
 8003002:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4aa4      	ldr	r2, [pc, #656]	; (80032a0 <UART_SetConfig+0x2f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d004      	beq.n	800301e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301a:	4313      	orrs	r3, r2
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a9f      	ldr	r2, [pc, #636]	; (80032a4 <UART_SetConfig+0x2fc>)
 8003026:	4013      	ands	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	220f      	movs	r2, #15
 800303c:	4393      	bics	r3, r2
 800303e:	0018      	movs	r0, r3
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	0003      	movs	r3, r0
 800304a:	430b      	orrs	r3, r1
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a95      	ldr	r2, [pc, #596]	; (80032a8 <UART_SetConfig+0x300>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d131      	bne.n	80030bc <UART_SetConfig+0x114>
 8003058:	4b94      	ldr	r3, [pc, #592]	; (80032ac <UART_SetConfig+0x304>)
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
 8003060:	2b03      	cmp	r3, #3
 8003062:	d01d      	beq.n	80030a0 <UART_SetConfig+0xf8>
 8003064:	d823      	bhi.n	80030ae <UART_SetConfig+0x106>
 8003066:	2b02      	cmp	r3, #2
 8003068:	d00c      	beq.n	8003084 <UART_SetConfig+0xdc>
 800306a:	d820      	bhi.n	80030ae <UART_SetConfig+0x106>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <UART_SetConfig+0xce>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d00e      	beq.n	8003092 <UART_SetConfig+0xea>
 8003074:	e01b      	b.n	80030ae <UART_SetConfig+0x106>
 8003076:	231b      	movs	r3, #27
 8003078:	2220      	movs	r2, #32
 800307a:	189b      	adds	r3, r3, r2
 800307c:	19db      	adds	r3, r3, r7
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e0b4      	b.n	80031ee <UART_SetConfig+0x246>
 8003084:	231b      	movs	r3, #27
 8003086:	2220      	movs	r2, #32
 8003088:	189b      	adds	r3, r3, r2
 800308a:	19db      	adds	r3, r3, r7
 800308c:	2202      	movs	r2, #2
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e0ad      	b.n	80031ee <UART_SetConfig+0x246>
 8003092:	231b      	movs	r3, #27
 8003094:	2220      	movs	r2, #32
 8003096:	189b      	adds	r3, r3, r2
 8003098:	19db      	adds	r3, r3, r7
 800309a:	2204      	movs	r2, #4
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e0a6      	b.n	80031ee <UART_SetConfig+0x246>
 80030a0:	231b      	movs	r3, #27
 80030a2:	2220      	movs	r2, #32
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	19db      	adds	r3, r3, r7
 80030a8:	2208      	movs	r2, #8
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e09f      	b.n	80031ee <UART_SetConfig+0x246>
 80030ae:	231b      	movs	r3, #27
 80030b0:	2220      	movs	r2, #32
 80030b2:	189b      	adds	r3, r3, r2
 80030b4:	19db      	adds	r3, r3, r7
 80030b6:	2210      	movs	r2, #16
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e098      	b.n	80031ee <UART_SetConfig+0x246>
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a7b      	ldr	r2, [pc, #492]	; (80032b0 <UART_SetConfig+0x308>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d131      	bne.n	800312a <UART_SetConfig+0x182>
 80030c6:	4b79      	ldr	r3, [pc, #484]	; (80032ac <UART_SetConfig+0x304>)
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	220c      	movs	r2, #12
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d01d      	beq.n	800310e <UART_SetConfig+0x166>
 80030d2:	d823      	bhi.n	800311c <UART_SetConfig+0x174>
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d00c      	beq.n	80030f2 <UART_SetConfig+0x14a>
 80030d8:	d820      	bhi.n	800311c <UART_SetConfig+0x174>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <UART_SetConfig+0x13c>
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d00e      	beq.n	8003100 <UART_SetConfig+0x158>
 80030e2:	e01b      	b.n	800311c <UART_SetConfig+0x174>
 80030e4:	231b      	movs	r3, #27
 80030e6:	2220      	movs	r2, #32
 80030e8:	189b      	adds	r3, r3, r2
 80030ea:	19db      	adds	r3, r3, r7
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e07d      	b.n	80031ee <UART_SetConfig+0x246>
 80030f2:	231b      	movs	r3, #27
 80030f4:	2220      	movs	r2, #32
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	19db      	adds	r3, r3, r7
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e076      	b.n	80031ee <UART_SetConfig+0x246>
 8003100:	231b      	movs	r3, #27
 8003102:	2220      	movs	r2, #32
 8003104:	189b      	adds	r3, r3, r2
 8003106:	19db      	adds	r3, r3, r7
 8003108:	2204      	movs	r2, #4
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e06f      	b.n	80031ee <UART_SetConfig+0x246>
 800310e:	231b      	movs	r3, #27
 8003110:	2220      	movs	r2, #32
 8003112:	189b      	adds	r3, r3, r2
 8003114:	19db      	adds	r3, r3, r7
 8003116:	2208      	movs	r2, #8
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e068      	b.n	80031ee <UART_SetConfig+0x246>
 800311c:	231b      	movs	r3, #27
 800311e:	2220      	movs	r2, #32
 8003120:	189b      	adds	r3, r3, r2
 8003122:	19db      	adds	r3, r3, r7
 8003124:	2210      	movs	r2, #16
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e061      	b.n	80031ee <UART_SetConfig+0x246>
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a61      	ldr	r2, [pc, #388]	; (80032b4 <UART_SetConfig+0x30c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d106      	bne.n	8003142 <UART_SetConfig+0x19a>
 8003134:	231b      	movs	r3, #27
 8003136:	2220      	movs	r2, #32
 8003138:	189b      	adds	r3, r3, r2
 800313a:	19db      	adds	r3, r3, r7
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e055      	b.n	80031ee <UART_SetConfig+0x246>
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <UART_SetConfig+0x310>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d106      	bne.n	800315a <UART_SetConfig+0x1b2>
 800314c:	231b      	movs	r3, #27
 800314e:	2220      	movs	r2, #32
 8003150:	189b      	adds	r3, r3, r2
 8003152:	19db      	adds	r3, r3, r7
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e049      	b.n	80031ee <UART_SetConfig+0x246>
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a50      	ldr	r2, [pc, #320]	; (80032a0 <UART_SetConfig+0x2f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d13e      	bne.n	80031e2 <UART_SetConfig+0x23a>
 8003164:	4b51      	ldr	r3, [pc, #324]	; (80032ac <UART_SetConfig+0x304>)
 8003166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003168:	23c0      	movs	r3, #192	; 0xc0
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	4013      	ands	r3, r2
 800316e:	22c0      	movs	r2, #192	; 0xc0
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	4293      	cmp	r3, r2
 8003174:	d027      	beq.n	80031c6 <UART_SetConfig+0x21e>
 8003176:	22c0      	movs	r2, #192	; 0xc0
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	4293      	cmp	r3, r2
 800317c:	d82a      	bhi.n	80031d4 <UART_SetConfig+0x22c>
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	0112      	lsls	r2, r2, #4
 8003182:	4293      	cmp	r3, r2
 8003184:	d011      	beq.n	80031aa <UART_SetConfig+0x202>
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	4293      	cmp	r3, r2
 800318c:	d822      	bhi.n	80031d4 <UART_SetConfig+0x22c>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <UART_SetConfig+0x1f4>
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	00d2      	lsls	r2, r2, #3
 8003196:	4293      	cmp	r3, r2
 8003198:	d00e      	beq.n	80031b8 <UART_SetConfig+0x210>
 800319a:	e01b      	b.n	80031d4 <UART_SetConfig+0x22c>
 800319c:	231b      	movs	r3, #27
 800319e:	2220      	movs	r2, #32
 80031a0:	189b      	adds	r3, r3, r2
 80031a2:	19db      	adds	r3, r3, r7
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e021      	b.n	80031ee <UART_SetConfig+0x246>
 80031aa:	231b      	movs	r3, #27
 80031ac:	2220      	movs	r2, #32
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	19db      	adds	r3, r3, r7
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e01a      	b.n	80031ee <UART_SetConfig+0x246>
 80031b8:	231b      	movs	r3, #27
 80031ba:	2220      	movs	r2, #32
 80031bc:	189b      	adds	r3, r3, r2
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	2204      	movs	r2, #4
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e013      	b.n	80031ee <UART_SetConfig+0x246>
 80031c6:	231b      	movs	r3, #27
 80031c8:	2220      	movs	r2, #32
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	2208      	movs	r2, #8
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e00c      	b.n	80031ee <UART_SetConfig+0x246>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2220      	movs	r2, #32
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2210      	movs	r2, #16
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e005      	b.n	80031ee <UART_SetConfig+0x246>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2220      	movs	r2, #32
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2210      	movs	r2, #16
 80031ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <UART_SetConfig+0x2f8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d000      	beq.n	80031fa <UART_SetConfig+0x252>
 80031f8:	e0a9      	b.n	800334e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031fa:	231b      	movs	r3, #27
 80031fc:	2220      	movs	r2, #32
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	19db      	adds	r3, r3, r7
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d015      	beq.n	8003234 <UART_SetConfig+0x28c>
 8003208:	dc18      	bgt.n	800323c <UART_SetConfig+0x294>
 800320a:	2b04      	cmp	r3, #4
 800320c:	d00d      	beq.n	800322a <UART_SetConfig+0x282>
 800320e:	dc15      	bgt.n	800323c <UART_SetConfig+0x294>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <UART_SetConfig+0x272>
 8003214:	2b02      	cmp	r3, #2
 8003216:	d005      	beq.n	8003224 <UART_SetConfig+0x27c>
 8003218:	e010      	b.n	800323c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321a:	f7ff fb07 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 800321e:	0003      	movs	r3, r0
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003222:	e014      	b.n	800324e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <UART_SetConfig+0x314>)
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003228:	e011      	b.n	800324e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322a:	f7ff fa73 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 800322e:	0003      	movs	r3, r0
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003232:	e00c      	b.n	800324e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800323a:	e008      	b.n	800324e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003240:	231a      	movs	r3, #26
 8003242:	2220      	movs	r2, #32
 8003244:	189b      	adds	r3, r3, r2
 8003246:	19db      	adds	r3, r3, r7
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
        break;
 800324c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	2b00      	cmp	r3, #0
 8003252:	d100      	bne.n	8003256 <UART_SetConfig+0x2ae>
 8003254:	e14b      	b.n	80034ee <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <UART_SetConfig+0x318>)
 800325c:	0052      	lsls	r2, r2, #1
 800325e:	5ad3      	ldrh	r3, [r2, r3]
 8003260:	0019      	movs	r1, r3
 8003262:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003264:	f7fc ff56 	bl	8000114 <__udivsi3>
 8003268:	0003      	movs	r3, r0
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	0013      	movs	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	189b      	adds	r3, r3, r2
 8003276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003278:	429a      	cmp	r2, r3
 800327a:	d305      	bcc.n	8003288 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003284:	429a      	cmp	r2, r3
 8003286:	d91d      	bls.n	80032c4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003288:	231a      	movs	r3, #26
 800328a:	2220      	movs	r2, #32
 800328c:	189b      	adds	r3, r3, r2
 800328e:	19db      	adds	r3, r3, r7
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e12b      	b.n	80034ee <UART_SetConfig+0x546>
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	cfff69f3 	.word	0xcfff69f3
 800329c:	ffffcfff 	.word	0xffffcfff
 80032a0:	40008000 	.word	0x40008000
 80032a4:	11fff4ff 	.word	0x11fff4ff
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40004400 	.word	0x40004400
 80032b4:	40004800 	.word	0x40004800
 80032b8:	40004c00 	.word	0x40004c00
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	08003bc8 	.word	0x08003bc8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032d0:	4b92      	ldr	r3, [pc, #584]	; (800351c <UART_SetConfig+0x574>)
 80032d2:	0052      	lsls	r2, r2, #1
 80032d4:	5ad3      	ldrh	r3, [r2, r3]
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	69b8      	ldr	r0, [r7, #24]
 80032e2:	69f9      	ldr	r1, [r7, #28]
 80032e4:	f7fd f88c 	bl	8000400 <__aeabi_uldivmod>
 80032e8:	0002      	movs	r2, r0
 80032ea:	000b      	movs	r3, r1
 80032ec:	0e11      	lsrs	r1, r2, #24
 80032ee:	021d      	lsls	r5, r3, #8
 80032f0:	430d      	orrs	r5, r1
 80032f2:	0214      	lsls	r4, r2, #8
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68b8      	ldr	r0, [r7, #8]
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	1900      	adds	r0, r0, r4
 8003306:	4169      	adcs	r1, r5
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f7fd f873 	bl	8000400 <__aeabi_uldivmod>
 800331a:	0002      	movs	r2, r0
 800331c:	000b      	movs	r3, r1
 800331e:	0013      	movs	r3, r2
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003324:	23c0      	movs	r3, #192	; 0xc0
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d309      	bcc.n	8003340 <UART_SetConfig+0x398>
 800332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	035b      	lsls	r3, r3, #13
 8003332:	429a      	cmp	r2, r3
 8003334:	d204      	bcs.n	8003340 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	e0d6      	b.n	80034ee <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003340:	231a      	movs	r3, #26
 8003342:	2220      	movs	r2, #32
 8003344:	189b      	adds	r3, r3, r2
 8003346:	19db      	adds	r3, r3, r7
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e0cf      	b.n	80034ee <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	429a      	cmp	r2, r3
 8003358:	d000      	beq.n	800335c <UART_SetConfig+0x3b4>
 800335a:	e070      	b.n	800343e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800335c:	231b      	movs	r3, #27
 800335e:	2220      	movs	r2, #32
 8003360:	189b      	adds	r3, r3, r2
 8003362:	19db      	adds	r3, r3, r7
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d015      	beq.n	8003396 <UART_SetConfig+0x3ee>
 800336a:	dc18      	bgt.n	800339e <UART_SetConfig+0x3f6>
 800336c:	2b04      	cmp	r3, #4
 800336e:	d00d      	beq.n	800338c <UART_SetConfig+0x3e4>
 8003370:	dc15      	bgt.n	800339e <UART_SetConfig+0x3f6>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0x3d4>
 8003376:	2b02      	cmp	r3, #2
 8003378:	d005      	beq.n	8003386 <UART_SetConfig+0x3de>
 800337a:	e010      	b.n	800339e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800337c:	f7ff fa56 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003380:	0003      	movs	r3, r0
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003384:	e014      	b.n	80033b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003386:	4b66      	ldr	r3, [pc, #408]	; (8003520 <UART_SetConfig+0x578>)
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800338a:	e011      	b.n	80033b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338c:	f7ff f9c2 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8003390:	0003      	movs	r3, r0
 8003392:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003394:	e00c      	b.n	80033b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800339c:	e008      	b.n	80033b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033a2:	231a      	movs	r3, #26
 80033a4:	2220      	movs	r2, #32
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	19db      	adds	r3, r3, r7
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
        break;
 80033ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d100      	bne.n	80033b8 <UART_SetConfig+0x410>
 80033b6:	e09a      	b.n	80034ee <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033bc:	4b57      	ldr	r3, [pc, #348]	; (800351c <UART_SetConfig+0x574>)
 80033be:	0052      	lsls	r2, r2, #1
 80033c0:	5ad3      	ldrh	r3, [r2, r3]
 80033c2:	0019      	movs	r1, r3
 80033c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033c6:	f7fc fea5 	bl	8000114 <__udivsi3>
 80033ca:	0003      	movs	r3, r0
 80033cc:	005a      	lsls	r2, r3, #1
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	18d2      	adds	r2, r2, r3
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0019      	movs	r1, r3
 80033dc:	0010      	movs	r0, r2
 80033de:	f7fc fe99 	bl	8000114 <__udivsi3>
 80033e2:	0003      	movs	r3, r0
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	2b0f      	cmp	r3, #15
 80033ea:	d921      	bls.n	8003430 <UART_SetConfig+0x488>
 80033ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	025b      	lsls	r3, r3, #9
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d21c      	bcs.n	8003430 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	200e      	movs	r0, #14
 80033fc:	2420      	movs	r4, #32
 80033fe:	1903      	adds	r3, r0, r4
 8003400:	19db      	adds	r3, r3, r7
 8003402:	210f      	movs	r1, #15
 8003404:	438a      	bics	r2, r1
 8003406:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	085b      	lsrs	r3, r3, #1
 800340c:	b29b      	uxth	r3, r3
 800340e:	2207      	movs	r2, #7
 8003410:	4013      	ands	r3, r2
 8003412:	b299      	uxth	r1, r3
 8003414:	1903      	adds	r3, r0, r4
 8003416:	19db      	adds	r3, r3, r7
 8003418:	1902      	adds	r2, r0, r4
 800341a:	19d2      	adds	r2, r2, r7
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	1902      	adds	r2, r0, r4
 8003428:	19d2      	adds	r2, r2, r7
 800342a:	8812      	ldrh	r2, [r2, #0]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e05e      	b.n	80034ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003430:	231a      	movs	r3, #26
 8003432:	2220      	movs	r2, #32
 8003434:	189b      	adds	r3, r3, r2
 8003436:	19db      	adds	r3, r3, r7
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e057      	b.n	80034ee <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800343e:	231b      	movs	r3, #27
 8003440:	2220      	movs	r2, #32
 8003442:	189b      	adds	r3, r3, r2
 8003444:	19db      	adds	r3, r3, r7
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d015      	beq.n	8003478 <UART_SetConfig+0x4d0>
 800344c:	dc18      	bgt.n	8003480 <UART_SetConfig+0x4d8>
 800344e:	2b04      	cmp	r3, #4
 8003450:	d00d      	beq.n	800346e <UART_SetConfig+0x4c6>
 8003452:	dc15      	bgt.n	8003480 <UART_SetConfig+0x4d8>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <UART_SetConfig+0x4b6>
 8003458:	2b02      	cmp	r3, #2
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0x4c0>
 800345c:	e010      	b.n	8003480 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345e:	f7ff f9e5 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003462:	0003      	movs	r3, r0
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003466:	e014      	b.n	8003492 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <UART_SetConfig+0x578>)
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800346c:	e011      	b.n	8003492 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346e:	f7ff f951 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8003472:	0003      	movs	r3, r0
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003476:	e00c      	b.n	8003492 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800347e:	e008      	b.n	8003492 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003484:	231a      	movs	r3, #26
 8003486:	2220      	movs	r2, #32
 8003488:	189b      	adds	r3, r3, r2
 800348a:	19db      	adds	r3, r3, r7
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
        break;
 8003490:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02a      	beq.n	80034ee <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800349c:	4b1f      	ldr	r3, [pc, #124]	; (800351c <UART_SetConfig+0x574>)
 800349e:	0052      	lsls	r2, r2, #1
 80034a0:	5ad3      	ldrh	r3, [r2, r3]
 80034a2:	0019      	movs	r1, r3
 80034a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034a6:	f7fc fe35 	bl	8000114 <__udivsi3>
 80034aa:	0003      	movs	r3, r0
 80034ac:	001a      	movs	r2, r3
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	18d2      	adds	r2, r2, r3
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	0019      	movs	r1, r3
 80034bc:	0010      	movs	r0, r2
 80034be:	f7fc fe29 	bl	8000114 <__udivsi3>
 80034c2:	0003      	movs	r3, r0
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d90a      	bls.n	80034e2 <UART_SetConfig+0x53a>
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	025b      	lsls	r3, r3, #9
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d205      	bcs.n	80034e2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	b29a      	uxth	r2, r3
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60da      	str	r2, [r3, #12]
 80034e0:	e005      	b.n	80034ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80034e2:	231a      	movs	r3, #26
 80034e4:	2220      	movs	r2, #32
 80034e6:	189b      	adds	r3, r3, r2
 80034e8:	19db      	adds	r3, r3, r7
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	226a      	movs	r2, #106	; 0x6a
 80034f2:	2101      	movs	r1, #1
 80034f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	2268      	movs	r2, #104	; 0x68
 80034fa:	2101      	movs	r1, #1
 80034fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	2200      	movs	r2, #0
 8003502:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	2200      	movs	r2, #0
 8003508:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800350a:	231a      	movs	r3, #26
 800350c:	2220      	movs	r2, #32
 800350e:	189b      	adds	r3, r3, r2
 8003510:	19db      	adds	r3, r3, r7
 8003512:	781b      	ldrb	r3, [r3, #0]
}
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b010      	add	sp, #64	; 0x40
 800351a:	bdb0      	pop	{r4, r5, r7, pc}
 800351c:	08003bc8 	.word	0x08003bc8
 8003520:	00f42400 	.word	0x00f42400

08003524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	2201      	movs	r2, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d00b      	beq.n	800354e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <UART_AdvFeatureConfig+0x144>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	d00b      	beq.n	8003570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a43      	ldr	r2, [pc, #268]	; (800366c <UART_AdvFeatureConfig+0x148>)
 8003560:	4013      	ands	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	2204      	movs	r2, #4
 8003576:	4013      	ands	r3, r2
 8003578:	d00b      	beq.n	8003592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <UART_AdvFeatureConfig+0x14c>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	2208      	movs	r2, #8
 8003598:	4013      	ands	r3, r2
 800359a:	d00b      	beq.n	80035b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4a34      	ldr	r2, [pc, #208]	; (8003674 <UART_AdvFeatureConfig+0x150>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	2210      	movs	r2, #16
 80035ba:	4013      	ands	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <UART_AdvFeatureConfig+0x154>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	2220      	movs	r2, #32
 80035dc:	4013      	ands	r3, r2
 80035de:	d00b      	beq.n	80035f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4a25      	ldr	r2, [pc, #148]	; (800367c <UART_AdvFeatureConfig+0x158>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	4013      	ands	r3, r2
 8003600:	d01d      	beq.n	800363e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <UART_AdvFeatureConfig+0x15c>)
 800360a:	4013      	ands	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	035b      	lsls	r3, r3, #13
 8003622:	429a      	cmp	r2, r3
 8003624:	d10b      	bne.n	800363e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <UART_AdvFeatureConfig+0x160>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	4013      	ands	r3, r2
 8003646:	d00b      	beq.n	8003660 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <UART_AdvFeatureConfig+0x164>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	b002      	add	sp, #8
 8003666:	bd80      	pop	{r7, pc}
 8003668:	fffdffff 	.word	0xfffdffff
 800366c:	fffeffff 	.word	0xfffeffff
 8003670:	fffbffff 	.word	0xfffbffff
 8003674:	ffff7fff 	.word	0xffff7fff
 8003678:	ffffefff 	.word	0xffffefff
 800367c:	ffffdfff 	.word	0xffffdfff
 8003680:	ffefffff 	.word	0xffefffff
 8003684:	ff9fffff 	.word	0xff9fffff
 8003688:	fff7ffff 	.word	0xfff7ffff

0800368c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2290      	movs	r2, #144	; 0x90
 8003698:	2100      	movs	r1, #0
 800369a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800369c:	f7fd fb68 	bl	8000d70 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2208      	movs	r2, #8
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d10c      	bne.n	80036cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2280      	movs	r2, #128	; 0x80
 80036b6:	0391      	lsls	r1, r2, #14
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4a1a      	ldr	r2, [pc, #104]	; (8003724 <UART_CheckIdleState+0x98>)
 80036bc:	9200      	str	r2, [sp, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	f000 f832 	bl	8003728 <UART_WaitOnFlagUntilTimeout>
 80036c4:	1e03      	subs	r3, r0, #0
 80036c6:	d001      	beq.n	80036cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e026      	b.n	800371a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2204      	movs	r2, #4
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d10c      	bne.n	80036f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	03d1      	lsls	r1, r2, #15
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4a10      	ldr	r2, [pc, #64]	; (8003724 <UART_CheckIdleState+0x98>)
 80036e4:	9200      	str	r2, [sp, #0]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f000 f81e 	bl	8003728 <UART_WaitOnFlagUntilTimeout>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d001      	beq.n	80036f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e012      	b.n	800371a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2288      	movs	r2, #136	; 0x88
 80036f8:	2120      	movs	r1, #32
 80036fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	228c      	movs	r2, #140	; 0x8c
 8003700:	2120      	movs	r1, #32
 8003702:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2284      	movs	r2, #132	; 0x84
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	01ffffff 	.word	0x01ffffff

08003728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b094      	sub	sp, #80	; 0x50
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	1dfb      	adds	r3, r7, #7
 8003736:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003738:	e0a7      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800373c:	3301      	adds	r3, #1
 800373e:	d100      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003740:	e0a3      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fd fb15 	bl	8000d70 <HAL_GetTick>
 8003746:	0002      	movs	r2, r0
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <UART_WaitOnFlagUntilTimeout+0x30>
 8003752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003754:	2b00      	cmp	r3, #0
 8003756:	d13f      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003758:	f3ef 8310 	mrs	r3, PRIMASK
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
 8003762:	2301      	movs	r3, #1
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	f383 8810 	msr	PRIMASK, r3
}
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	494e      	ldr	r1, [pc, #312]	; (80038b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800377a:	400a      	ands	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003792:	643b      	str	r3, [r7, #64]	; 0x40
 8003794:	2301      	movs	r3, #1
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2101      	movs	r1, #1
 80037ac:	438a      	bics	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2288      	movs	r2, #136	; 0x88
 80037c0:	2120      	movs	r1, #32
 80037c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	228c      	movs	r2, #140	; 0x8c
 80037c8:	2120      	movs	r1, #32
 80037ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2284      	movs	r2, #132	; 0x84
 80037d0:	2100      	movs	r1, #0
 80037d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e069      	b.n	80038ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2204      	movs	r2, #4
 80037e0:	4013      	ands	r3, r2
 80037e2:	d052      	beq.n	800388a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	401a      	ands	r2, r3
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d148      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003802:	f3ef 8310 	mrs	r3, PRIMASK
 8003806:	613b      	str	r3, [r7, #16]
  return(result);
 8003808:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	2301      	movs	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4924      	ldr	r1, [pc, #144]	; (80038b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003824:	400a      	ands	r2, r1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f383 8810 	msr	PRIMASK, r3
}
 8003832:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003834:	f3ef 8310 	mrs	r3, PRIMASK
 8003838:	61fb      	str	r3, [r7, #28]
  return(result);
 800383a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
 800383e:	2301      	movs	r3, #1
 8003840:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	438a      	bics	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2288      	movs	r2, #136	; 0x88
 800386a:	2120      	movs	r1, #32
 800386c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	228c      	movs	r2, #140	; 0x8c
 8003872:	2120      	movs	r1, #32
 8003874:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2290      	movs	r2, #144	; 0x90
 800387a:	2120      	movs	r1, #32
 800387c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2284      	movs	r2, #132	; 0x84
 8003882:	2100      	movs	r1, #0
 8003884:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e010      	b.n	80038ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4013      	ands	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	425a      	negs	r2, r3
 800389a:	4153      	adcs	r3, r2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	001a      	movs	r2, r3
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d100      	bne.n	80038aa <UART_WaitOnFlagUntilTimeout+0x182>
 80038a8:	e747      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b014      	add	sp, #80	; 0x50
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	fffffe5f 	.word	0xfffffe5f

080038b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2284      	movs	r2, #132	; 0x84
 80038c4:	5c9b      	ldrb	r3, [r3, r2]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_UARTEx_DisableFifoMode+0x16>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e027      	b.n	800391e <HAL_UARTEx_DisableFifoMode+0x66>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2284      	movs	r2, #132	; 0x84
 80038d2:	2101      	movs	r1, #1
 80038d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2288      	movs	r2, #136	; 0x88
 80038da:	2124      	movs	r1, #36	; 0x24
 80038dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2101      	movs	r1, #1
 80038f2:	438a      	bics	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <HAL_UARTEx_DisableFifoMode+0x70>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2288      	movs	r2, #136	; 0x88
 8003910:	2120      	movs	r1, #32
 8003912:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2284      	movs	r2, #132	; 0x84
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	0018      	movs	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	dfffffff 	.word	0xdfffffff

0800392c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2284      	movs	r2, #132	; 0x84
 800393a:	5c9b      	ldrb	r3, [r3, r2]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003940:	2302      	movs	r3, #2
 8003942:	e02e      	b.n	80039a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2284      	movs	r2, #132	; 0x84
 8003948:	2101      	movs	r1, #1
 800394a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2288      	movs	r2, #136	; 0x88
 8003950:	2124      	movs	r1, #36	; 0x24
 8003952:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	08d9      	lsrs	r1, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 f854 	bl	8003a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2288      	movs	r2, #136	; 0x88
 8003994:	2120      	movs	r1, #32
 8003996:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2284      	movs	r2, #132	; 0x84
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b004      	add	sp, #16
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2284      	movs	r2, #132	; 0x84
 80039ba:	5c9b      	ldrb	r3, [r3, r2]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e02f      	b.n	8003a24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2284      	movs	r2, #132	; 0x84
 80039c8:	2101      	movs	r1, #1
 80039ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2288      	movs	r2, #136	; 0x88
 80039d0:	2124      	movs	r1, #36	; 0x24
 80039d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2101      	movs	r1, #1
 80039e8:	438a      	bics	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	0019      	movs	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 f813 	bl	8003a30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2288      	movs	r2, #136	; 0x88
 8003a16:	2120      	movs	r1, #32
 8003a18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2284      	movs	r2, #132	; 0x84
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	f1ffffff 	.word	0xf1ffffff

08003a30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	226a      	movs	r2, #106	; 0x6a
 8003a44:	2101      	movs	r1, #1
 8003a46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2268      	movs	r2, #104	; 0x68
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a50:	e043      	b.n	8003ada <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a52:	260f      	movs	r6, #15
 8003a54:	19bb      	adds	r3, r7, r6
 8003a56:	2208      	movs	r2, #8
 8003a58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a5a:	200e      	movs	r0, #14
 8003a5c:	183b      	adds	r3, r7, r0
 8003a5e:	2208      	movs	r2, #8
 8003a60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	0e5b      	lsrs	r3, r3, #25
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	240d      	movs	r4, #13
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2107      	movs	r1, #7
 8003a72:	400a      	ands	r2, r1
 8003a74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	0f5b      	lsrs	r3, r3, #29
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	250c      	movs	r5, #12
 8003a82:	197b      	adds	r3, r7, r5
 8003a84:	2107      	movs	r1, #7
 8003a86:	400a      	ands	r2, r1
 8003a88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	197a      	adds	r2, r7, r5
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	4914      	ldr	r1, [pc, #80]	; (8003ae4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a94:	5c8a      	ldrb	r2, [r1, r2]
 8003a96:	435a      	muls	r2, r3
 8003a98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a9a:	197b      	adds	r3, r7, r5
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	f7fc fbc0 	bl	8000228 <__divsi3>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	b299      	uxth	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	226a      	movs	r2, #106	; 0x6a
 8003ab0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ab2:	19bb      	adds	r3, r7, r6
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	193a      	adds	r2, r7, r4
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	490a      	ldr	r1, [pc, #40]	; (8003ae4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003abc:	5c8a      	ldrb	r2, [r1, r2]
 8003abe:	435a      	muls	r2, r3
 8003ac0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ac2:	193b      	adds	r3, r7, r4
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ac8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003aca:	0019      	movs	r1, r3
 8003acc:	f7fc fbac 	bl	8000228 <__divsi3>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	b299      	uxth	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2268      	movs	r2, #104	; 0x68
 8003ad8:	5299      	strh	r1, [r3, r2]
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b005      	add	sp, #20
 8003ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	08003be0 	.word	0x08003be0
 8003ae8:	08003be8 	.word	0x08003be8

08003aec <memset>:
 8003aec:	0003      	movs	r3, r0
 8003aee:	1882      	adds	r2, r0, r2
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	7019      	strb	r1, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	2600      	movs	r6, #0
 8003b00:	4c0c      	ldr	r4, [pc, #48]	; (8003b34 <__libc_init_array+0x38>)
 8003b02:	4d0d      	ldr	r5, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	2600      	movs	r6, #0
 8003b0e:	f000 f819 	bl	8003b44 <_init>
 8003b12:	4c0a      	ldr	r4, [pc, #40]	; (8003b3c <__libc_init_array+0x40>)
 8003b14:	4d0a      	ldr	r5, [pc, #40]	; (8003b40 <__libc_init_array+0x44>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	00b3      	lsls	r3, r6, #2
 8003b22:	58eb      	ldr	r3, [r5, r3]
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	00b3      	lsls	r3, r6, #2
 8003b2c:	58eb      	ldr	r3, [r5, r3]
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08003bf8 	.word	0x08003bf8
 8003b38:	08003bf8 	.word	0x08003bf8
 8003b3c:	08003bfc 	.word	0x08003bfc
 8003b40:	08003bf8 	.word	0x08003bf8

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
